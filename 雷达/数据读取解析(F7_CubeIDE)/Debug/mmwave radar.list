
mmwave radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800611c  0800611c  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006124  08006124  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800612c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001444  20000350  0800647c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001794  0800647c  00021794  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b3b  00000000  00000000  0002037e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002399  00000000  00000000  00031eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00034258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00035178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bcb  00000000  00000000  00035fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f5b  00000000  00000000  0005eb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd2bf  00000000  00000000  00070ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016dd95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f8  00000000  00000000  0016dde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000350 	.word	0x20000350
 800021c:	00000000 	.word	0x00000000
 8000220:	08005f88 	.word	0x08005f88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000354 	.word	0x20000354
 800023c:	08005f88 	.word	0x08005f88

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <__io_putchar>:

/*----------------------------------------------------------------------------*/
/*--printf() remap------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
PUTCHAR_PROTOTYPE
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF);//阻塞方式打印,串口1
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <__io_putchar+0x20>)
 80005f6:	f003 fa35 	bl	8003a64 <HAL_UART_Transmit>
  return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200004c8 	.word	0x200004c8

08000608 <HAL_TIM_PeriodElapsedCallback>:
/*----------------------------------------------------------------------------*/
/*--These functions is used to receive data packets of unknown length---------*/
/*--using the serial port. Two bytes separated by more than 10ms will be------*/
/*--considered as two packets.------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    if(htim==(&htim1)){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d109      	bne.n	800062c <HAL_TIM_PeriodElapsedCallback+0x24>
    	HAL_GPIO_TogglePin(DS0_GPIO_Port,DS0_Pin);//
 8000618:	2102      	movs	r1, #2
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800061c:	f001 fba7 	bl	8001d6e <HAL_GPIO_TogglePin>
	    radar_rxDataFlag=1;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Stop_IT(&htim1);
 8000626:	4803      	ldr	r0, [pc, #12]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000628:	f002 fda8 	bl	800317c <HAL_TIM_Base_Stop_IT>
    }
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000036c 	.word	0x2000036c
 8000638:	40020400 	.word	0x40020400
 800063c:	20000550 	.word	0x20000550

08000640 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <HAL_UART_RxCpltCallback+0x5c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d11f      	bne.n	8000692 <HAL_UART_RxCpltCallback+0x52>
		__HAL_TIM_SET_COUNTER(&htim1,0);
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_UART_RxCpltCallback+0x60>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
		if(0 == radar_rxDataCnt){
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_UART_RxCpltCallback+0x64>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d107      	bne.n	8000672 <HAL_UART_RxCpltCallback+0x32>
		    __HAL_TIM_CLEAR_FLAG(&htim1,TIM_FLAG_UPDATE);
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_UART_RxCpltCallback+0x60>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f06f 0201 	mvn.w	r2, #1
 800066a:	611a      	str	r2, [r3, #16]
		    HAL_TIM_Base_Start_IT(&htim1);
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <HAL_UART_RxCpltCallback+0x60>)
 800066e:	f002 fd0d 	bl	800308c <HAL_TIM_Base_Start_IT>
		}
		radar_rxDataBuf[radar_rxDataCnt]=radar_rxDataBufTemp[0];
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_UART_RxCpltCallback+0x64>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 8000678:	7811      	ldrb	r1, [r2, #0]
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 800067c:	54d1      	strb	r1, [r2, r3]
		radar_rxDataCnt++;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_UART_RxCpltCallback+0x64>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_UART_RxCpltCallback+0x64>)
 8000686:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart5,(uint8_t *)radar_rxDataBufTemp,1);
 8000688:	2201      	movs	r2, #1
 800068a:	4907      	ldr	r1, [pc, #28]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <HAL_UART_RxCpltCallback+0x70>)
 800068e:	f003 fa6c 	bl	8003b6a <HAL_UART_Receive_IT>
	}
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40005000 	.word	0x40005000
 80006a0:	2000036c 	.word	0x2000036c
 80006a4:	20000554 	.word	0x20000554
 80006a8:	20000d30 	.word	0x20000d30
 80006ac:	20000558 	.word	0x20000558
 80006b0:	200003b8 	.word	0x200003b8

080006b4 <radar_getUint32>:
/*----------------------------------------------------------------------------*/
/*--These functions are used to unpack and process datapack-------------------*/
/*----------------------------------------------------------------------------*/
int radar_getUint32(uint8_t data[4]){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	return(data[0]+data[1]*256+data[2]*65536+data[3]*16777216);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3301      	adds	r3, #1
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	441a      	add	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3302      	adds	r3, #2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	041b      	lsls	r3, r3, #16
 80006d4:	441a      	add	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3303      	adds	r3, #3
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	061b      	lsls	r3, r3, #24
 80006de:	4413      	add	r3, r2
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <radar_getUint16>:
int radar_getUint16(uint8_t data[2]){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	return(data[0]+data[1]*256);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	4413      	add	r3, r2
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <radar_getTime>:
void radar_getTime(uint8_t data[4]){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    int time=radar_getUint32(data);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffcb 	bl	80006b4 <radar_getUint32>
 800071e:	60f8      	str	r0, [r7, #12]
    radar_timeInfo[3]=time/86400000; time%=86400000; 	//d
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <radar_getTime+0xcc>)
 8000724:	fb82 1203 	smull	r1, r2, r2, r3
 8000728:	1612      	asrs	r2, r2, #24
 800072a:	17db      	asrs	r3, r3, #31
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <radar_getTime+0xd0>)
 8000730:	60d3      	str	r3, [r2, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4a29      	ldr	r2, [pc, #164]	; (80007dc <radar_getTime+0xcc>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	1611      	asrs	r1, r2, #24
 800073c:	17da      	asrs	r2, r3, #31
 800073e:	1a8a      	subs	r2, r1, r2
 8000740:	4928      	ldr	r1, [pc, #160]	; (80007e4 <radar_getTime+0xd4>)
 8000742:	fb01 f202 	mul.w	r2, r1, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
    radar_timeInfo[4]=time/3600000; time%=3600000; 		//h
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <radar_getTime+0xd8>)
 800074e:	fb82 1203 	smull	r1, r2, r2, r3
 8000752:	1512      	asrs	r2, r2, #20
 8000754:	17db      	asrs	r3, r3, #31
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <radar_getTime+0xd0>)
 800075a:	6113      	str	r3, [r2, #16]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <radar_getTime+0xd8>)
 8000760:	fb82 1203 	smull	r1, r2, r2, r3
 8000764:	1511      	asrs	r1, r2, #20
 8000766:	17da      	asrs	r2, r3, #31
 8000768:	1a8a      	subs	r2, r1, r2
 800076a:	4920      	ldr	r1, [pc, #128]	; (80007ec <radar_getTime+0xdc>)
 800076c:	fb01 f202 	mul.w	r2, r1, r2
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
    radar_timeInfo[5]=time/60000; time%=60000; 			//m
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <radar_getTime+0xe0>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	1392      	asrs	r2, r2, #14
 800077e:	17db      	asrs	r3, r3, #31
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <radar_getTime+0xd0>)
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <radar_getTime+0xe0>)
 800078a:	fb82 1203 	smull	r1, r2, r2, r3
 800078e:	1391      	asrs	r1, r2, #14
 8000790:	17da      	asrs	r2, r3, #31
 8000792:	1a8a      	subs	r2, r1, r2
 8000794:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000798:	fb01 f202 	mul.w	r2, r1, r2
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
    radar_timeInfo[6]=time/1000; time%=1000; 			//s
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <radar_getTime+0xe4>)
 80007a4:	fb82 1203 	smull	r1, r2, r2, r3
 80007a8:	1192      	asrs	r2, r2, #6
 80007aa:	17db      	asrs	r3, r3, #31
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <radar_getTime+0xd0>)
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <radar_getTime+0xe4>)
 80007b6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ba:	1191      	asrs	r1, r2, #6
 80007bc:	17da      	asrs	r2, r3, #31
 80007be:	1a8a      	subs	r2, r1, r2
 80007c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007c4:	fb01 f202 	mul.w	r2, r1, r2
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
    radar_timeInfo[7]=time; 							//ms
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <radar_getTime+0xd0>)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	61d3      	str	r3, [r2, #28]
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	31b5d43b 	.word	0x31b5d43b
 80007e0:	2000173c 	.word	0x2000173c
 80007e4:	05265c00 	.word	0x05265c00
 80007e8:	4a90be59 	.word	0x4a90be59
 80007ec:	0036ee80 	.word	0x0036ee80
 80007f0:	45e7b273 	.word	0x45e7b273
 80007f4:	10624dd3 	.word	0x10624dd3

080007f8 <radar_rxDataBufCut>:
void radar_rxDataBufCut(int x){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    memcpy(radar_rxDataTemp,radar_rxDataBuf,x);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	461a      	mov	r2, r3
 8000804:	4911      	ldr	r1, [pc, #68]	; (800084c <radar_rxDataBufCut+0x54>)
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <radar_rxDataBufCut+0x58>)
 8000808:	f004 fc1a 	bl	8005040 <memcpy>
    radar_rxDataCnt-=x;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <radar_rxDataBufCut+0x5c>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <radar_rxDataBufCut+0x5c>)
 8000816:	6013      	str	r3, [r2, #0]
    for(int i=0;i<radar_rxDataCnt;i++){
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e00c      	b.n	8000838 <radar_rxDataBufCut+0x40>
        radar_rxDataBuf[i]=radar_rxDataBuf[i+x];
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	4a09      	ldr	r2, [pc, #36]	; (800084c <radar_rxDataBufCut+0x54>)
 8000826:	5cd1      	ldrb	r1, [r2, r3]
 8000828:	4a08      	ldr	r2, [pc, #32]	; (800084c <radar_rxDataBufCut+0x54>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	4413      	add	r3, r2
 800082e:	460a      	mov	r2, r1
 8000830:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<radar_rxDataCnt;i++){
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	3301      	adds	r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <radar_rxDataBufCut+0x5c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	dbed      	blt.n	800081e <radar_rxDataBufCut+0x26>
    }
}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000558 	.word	0x20000558
 8000850:	20000d28 	.word	0x20000d28
 8000854:	20000554 	.word	0x20000554

08000858 <radar_checkMagicPattern>:
int radar_checkMagicPattern(){
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
	int found=1;
 800085e:	2301      	movs	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
	uint8_t MagicPattern[8]={2,1,4,3,6,5,8,7};
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <radar_checkMagicPattern+0x50>)
 8000864:	463b      	mov	r3, r7
 8000866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800086a:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i=0;i<8;i++){
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	e00e      	b.n	8000892 <radar_checkMagicPattern+0x3a>
		if(radar_rxDataBuf[i]!=MagicPattern[i]) found=0;
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <radar_checkMagicPattern+0x54>)
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	4413      	add	r3, r2
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	4639      	mov	r1, r7
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	440b      	add	r3, r1
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d001      	beq.n	800088c <radar_checkMagicPattern+0x34>
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<8;i++){
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	3301      	adds	r3, #1
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	2b07      	cmp	r3, #7
 8000896:	dded      	ble.n	8000874 <radar_checkMagicPattern+0x1c>
	}
    radar_rxDataBufCut(8);
 8000898:	2008      	movs	r0, #8
 800089a:	f7ff ffad 	bl	80007f8 <radar_rxDataBufCut>
	return (found);
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	08005fa0 	.word	0x08005fa0
 80008ac:	20000558 	.word	0x20000558

080008b0 <radar_dataUnpack>:
void radar_dataUnpack(){	//main data unpack function
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
    int radar_tlvType;
    int radar_tlvLength;
    if(radar_checkMagicPattern()){
 80008b6:	f7ff ffcf 	bl	8000858 <radar_checkMagicPattern>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 812e 	beq.w	8000b1e <radar_dataUnpack+0x26e>
        radar_rxDataBufCut(4); //skip firmwareVersion
 80008c2:	2004      	movs	r0, #4
 80008c4:	f7ff ff98 	bl	80007f8 <radar_rxDataBufCut>
        radar_rxDataBufCut(4); radar_packData.totalPacketNumBytes   =radar_getUint32(radar_rxDataTemp);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f7ff ff95 	bl	80007f8 <radar_rxDataBufCut>
 80008ce:	48a1      	ldr	r0, [pc, #644]	; (8000b54 <radar_dataUnpack+0x2a4>)
 80008d0:	f7ff fef0 	bl	80006b4 <radar_getUint32>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4aa0      	ldr	r2, [pc, #640]	; (8000b58 <radar_dataUnpack+0x2a8>)
 80008d8:	6053      	str	r3, [r2, #4]
        radar_rxDataBufCut(4); //skip platform
 80008da:	2004      	movs	r0, #4
 80008dc:	f7ff ff8c 	bl	80007f8 <radar_rxDataBufCut>
        radar_rxDataBufCut(4); radar_packData.frameNumber           =radar_getUint32(radar_rxDataTemp);
 80008e0:	2004      	movs	r0, #4
 80008e2:	f7ff ff89 	bl	80007f8 <radar_rxDataBufCut>
 80008e6:	489b      	ldr	r0, [pc, #620]	; (8000b54 <radar_dataUnpack+0x2a4>)
 80008e8:	f7ff fee4 	bl	80006b4 <radar_getUint32>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a9a      	ldr	r2, [pc, #616]	; (8000b58 <radar_dataUnpack+0x2a8>)
 80008f0:	60d3      	str	r3, [r2, #12]
        radar_rxDataBufCut(4); radar_packData.timeCpuCycles         =radar_getUint32(radar_rxDataTemp);
 80008f2:	2004      	movs	r0, #4
 80008f4:	f7ff ff80 	bl	80007f8 <radar_rxDataBufCut>
 80008f8:	4896      	ldr	r0, [pc, #600]	; (8000b54 <radar_dataUnpack+0x2a4>)
 80008fa:	f7ff fedb 	bl	80006b4 <radar_getUint32>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a95      	ldr	r2, [pc, #596]	; (8000b58 <radar_dataUnpack+0x2a8>)
 8000902:	6113      	str	r3, [r2, #16]
        radar_rxDataBufCut(4); radar_packData.numDetObj             =radar_getUint32(radar_rxDataTemp);
 8000904:	2004      	movs	r0, #4
 8000906:	f7ff ff77 	bl	80007f8 <radar_rxDataBufCut>
 800090a:	4892      	ldr	r0, [pc, #584]	; (8000b54 <radar_dataUnpack+0x2a4>)
 800090c:	f7ff fed2 	bl	80006b4 <radar_getUint32>
 8000910:	4603      	mov	r3, r0
 8000912:	4a91      	ldr	r2, [pc, #580]	; (8000b58 <radar_dataUnpack+0x2a8>)
 8000914:	6153      	str	r3, [r2, #20]
        radar_rxDataBufCut(4); radar_packData.numTlv                =radar_getUint32(radar_rxDataTemp);
 8000916:	2004      	movs	r0, #4
 8000918:	f7ff ff6e 	bl	80007f8 <radar_rxDataBufCut>
 800091c:	488d      	ldr	r0, [pc, #564]	; (8000b54 <radar_dataUnpack+0x2a4>)
 800091e:	f7ff fec9 	bl	80006b4 <radar_getUint32>
 8000922:	4603      	mov	r3, r0
 8000924:	4a8c      	ldr	r2, [pc, #560]	; (8000b58 <radar_dataUnpack+0x2a8>)
 8000926:	6193      	str	r3, [r2, #24]
        radar_rxDataBufCut(4); //skip subFrameNumber
 8000928:	2004      	movs	r0, #4
 800092a:	f7ff ff65 	bl	80007f8 <radar_rxDataBufCut>
        for(int i=0;i<radar_packData.numTlv;i++){
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
 8000932:	e0ee      	b.n	8000b12 <radar_dataUnpack+0x262>
            radar_rxDataBufCut(4); radar_tlvType    =radar_getUint32(radar_rxDataTemp);
 8000934:	2004      	movs	r0, #4
 8000936:	f7ff ff5f 	bl	80007f8 <radar_rxDataBufCut>
 800093a:	4886      	ldr	r0, [pc, #536]	; (8000b54 <radar_dataUnpack+0x2a4>)
 800093c:	f7ff feba 	bl	80006b4 <radar_getUint32>
 8000940:	60b8      	str	r0, [r7, #8]
            radar_rxDataBufCut(4); radar_tlvLength  =radar_getUint32(radar_rxDataTemp);
 8000942:	2004      	movs	r0, #4
 8000944:	f7ff ff58 	bl	80007f8 <radar_rxDataBufCut>
 8000948:	4882      	ldr	r0, [pc, #520]	; (8000b54 <radar_dataUnpack+0x2a4>)
 800094a:	f7ff feb3 	bl	80006b4 <radar_getUint32>
 800094e:	6078      	str	r0, [r7, #4]
            if(radar_tlvType == 1){ //point detacted in x,y,z,v
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d14e      	bne.n	80009f4 <radar_dataUnpack+0x144>
                for(int j=0;j<radar_tlvLength/16;j++){
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
 800095a:	e041      	b.n	80009e0 <radar_dataUnpack+0x130>
                    radar_rxDataBufCut(4); radar_pointDetacted[j][0]=radar_getUint32(radar_rxDataTemp); //x
 800095c:	2004      	movs	r0, #4
 800095e:	f7ff ff4b 	bl	80007f8 <radar_rxDataBufCut>
 8000962:	487c      	ldr	r0, [pc, #496]	; (8000b54 <radar_dataUnpack+0x2a4>)
 8000964:	f7ff fea6 	bl	80006b4 <radar_getUint32>
 8000968:	4601      	mov	r1, r0
 800096a:	487c      	ldr	r0, [pc, #496]	; (8000b5c <radar_dataUnpack+0x2ac>)
 800096c:	6a3a      	ldr	r2, [r7, #32]
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4403      	add	r3, r0
 8000978:	6019      	str	r1, [r3, #0]
                    radar_rxDataBufCut(4); radar_pointDetacted[j][1]=radar_getUint32(radar_rxDataTemp); //y
 800097a:	2004      	movs	r0, #4
 800097c:	f7ff ff3c 	bl	80007f8 <radar_rxDataBufCut>
 8000980:	4874      	ldr	r0, [pc, #464]	; (8000b54 <radar_dataUnpack+0x2a4>)
 8000982:	f7ff fe97 	bl	80006b4 <radar_getUint32>
 8000986:	4601      	mov	r1, r0
 8000988:	4874      	ldr	r0, [pc, #464]	; (8000b5c <radar_dataUnpack+0x2ac>)
 800098a:	6a3a      	ldr	r2, [r7, #32]
 800098c:	4613      	mov	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	4403      	add	r3, r0
 8000996:	3304      	adds	r3, #4
 8000998:	6019      	str	r1, [r3, #0]
                    radar_rxDataBufCut(4); radar_pointDetacted[j][2]=radar_getUint32(radar_rxDataTemp); //z
 800099a:	2004      	movs	r0, #4
 800099c:	f7ff ff2c 	bl	80007f8 <radar_rxDataBufCut>
 80009a0:	486c      	ldr	r0, [pc, #432]	; (8000b54 <radar_dataUnpack+0x2a4>)
 80009a2:	f7ff fe87 	bl	80006b4 <radar_getUint32>
 80009a6:	4601      	mov	r1, r0
 80009a8:	486c      	ldr	r0, [pc, #432]	; (8000b5c <radar_dataUnpack+0x2ac>)
 80009aa:	6a3a      	ldr	r2, [r7, #32]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4403      	add	r3, r0
 80009b6:	3308      	adds	r3, #8
 80009b8:	6019      	str	r1, [r3, #0]
                    radar_rxDataBufCut(4); radar_pointDetacted[j][3]=radar_getUint32(radar_rxDataTemp); //v
 80009ba:	2004      	movs	r0, #4
 80009bc:	f7ff ff1c 	bl	80007f8 <radar_rxDataBufCut>
 80009c0:	4864      	ldr	r0, [pc, #400]	; (8000b54 <radar_dataUnpack+0x2a4>)
 80009c2:	f7ff fe77 	bl	80006b4 <radar_getUint32>
 80009c6:	4601      	mov	r1, r0
 80009c8:	4864      	ldr	r0, [pc, #400]	; (8000b5c <radar_dataUnpack+0x2ac>)
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	4403      	add	r3, r0
 80009d6:	330c      	adds	r3, #12
 80009d8:	6019      	str	r1, [r3, #0]
                for(int j=0;j<radar_tlvLength/16;j++){
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	3301      	adds	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da00      	bge.n	80009e8 <radar_dataUnpack+0x138>
 80009e6:	330f      	adds	r3, #15
 80009e8:	111b      	asrs	r3, r3, #4
 80009ea:	461a      	mov	r2, r3
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	4293      	cmp	r3, r2
 80009f0:	dbb4      	blt.n	800095c <radar_dataUnpack+0xac>
 80009f2:	e08b      	b.n	8000b0c <radar_dataUnpack+0x25c>
                }
            }
            else if(radar_tlvType == 7){ //point detacted in snr,noise
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	d12f      	bne.n	8000a5a <radar_dataUnpack+0x1aa>
                for(int j=0;j<radar_tlvLength/4;j++){
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	e022      	b.n	8000a46 <radar_dataUnpack+0x196>
                    radar_rxDataBufCut(2); radar_pointDetacted[j][4]=radar_getUint16(radar_rxDataTemp); //snr
 8000a00:	2002      	movs	r0, #2
 8000a02:	f7ff fef9 	bl	80007f8 <radar_rxDataBufCut>
 8000a06:	4853      	ldr	r0, [pc, #332]	; (8000b54 <radar_dataUnpack+0x2a4>)
 8000a08:	f7ff fe70 	bl	80006ec <radar_getUint16>
 8000a0c:	4601      	mov	r1, r0
 8000a0e:	4853      	ldr	r0, [pc, #332]	; (8000b5c <radar_dataUnpack+0x2ac>)
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	4403      	add	r3, r0
 8000a1c:	3310      	adds	r3, #16
 8000a1e:	6019      	str	r1, [r3, #0]
                    radar_rxDataBufCut(2); radar_pointDetacted[j][5]=radar_getUint16(radar_rxDataTemp); //noise
 8000a20:	2002      	movs	r0, #2
 8000a22:	f7ff fee9 	bl	80007f8 <radar_rxDataBufCut>
 8000a26:	484b      	ldr	r0, [pc, #300]	; (8000b54 <radar_dataUnpack+0x2a4>)
 8000a28:	f7ff fe60 	bl	80006ec <radar_getUint16>
 8000a2c:	4601      	mov	r1, r0
 8000a2e:	484b      	ldr	r0, [pc, #300]	; (8000b5c <radar_dataUnpack+0x2ac>)
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	4403      	add	r3, r0
 8000a3c:	3314      	adds	r3, #20
 8000a3e:	6019      	str	r1, [r3, #0]
                for(int j=0;j<radar_tlvLength/4;j++){
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	3301      	adds	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da00      	bge.n	8000a4e <radar_dataUnpack+0x19e>
 8000a4c:	3303      	adds	r3, #3
 8000a4e:	109b      	asrs	r3, r3, #2
 8000a50:	461a      	mov	r2, r3
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	4293      	cmp	r3, r2
 8000a56:	dbd3      	blt.n	8000a00 <radar_dataUnpack+0x150>
 8000a58:	e058      	b.n	8000b0c <radar_dataUnpack+0x25c>
                }
            }
            else if(radar_tlvType == 2){ //range profile
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d11a      	bne.n	8000a96 <radar_dataUnpack+0x1e6>
                for(int j=0;j<radar_tlvLength/2;j++){
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	e00d      	b.n	8000a82 <radar_dataUnpack+0x1d2>
                    radar_rxDataBufCut(2); radar_rangeProfile[j]=radar_getUint16(radar_rxDataTemp); //in dB
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff fec6 	bl	80007f8 <radar_rxDataBufCut>
 8000a6c:	4839      	ldr	r0, [pc, #228]	; (8000b54 <radar_dataUnpack+0x2a4>)
 8000a6e:	f7ff fe3d 	bl	80006ec <radar_getUint16>
 8000a72:	4602      	mov	r2, r0
 8000a74:	493a      	ldr	r1, [pc, #232]	; (8000b60 <radar_dataUnpack+0x2b0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for(int j=0;j<radar_tlvLength/2;j++){
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	da00      	bge.n	8000a8a <radar_dataUnpack+0x1da>
 8000a88:	3301      	adds	r3, #1
 8000a8a:	105b      	asrs	r3, r3, #1
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4293      	cmp	r3, r2
 8000a92:	dbe8      	blt.n	8000a66 <radar_dataUnpack+0x1b6>
 8000a94:	e03a      	b.n	8000b0c <radar_dataUnpack+0x25c>
                }
            }
            else if(radar_tlvType == 6){ //time information
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d117      	bne.n	8000acc <radar_dataUnpack+0x21c>
                for(int j=0;j<3;j++){
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e00d      	b.n	8000abe <radar_dataUnpack+0x20e>
                    radar_rxDataBufCut(4); radar_timeInfo[j]=radar_getUint32(radar_rxDataTemp);
 8000aa2:	2004      	movs	r0, #4
 8000aa4:	f7ff fea8 	bl	80007f8 <radar_rxDataBufCut>
 8000aa8:	482a      	ldr	r0, [pc, #168]	; (8000b54 <radar_dataUnpack+0x2a4>)
 8000aaa:	f7ff fe03 	bl	80006b4 <radar_getUint32>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	492c      	ldr	r1, [pc, #176]	; (8000b64 <radar_dataUnpack+0x2b4>)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for(int j=0;j<3;j++){
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	ddee      	ble.n	8000aa2 <radar_dataUnpack+0x1f2>
                }
                radar_rxDataBufCut(12); //jump 12 useless bytes
 8000ac4:	200c      	movs	r0, #12
 8000ac6:	f7ff fe97 	bl	80007f8 <radar_rxDataBufCut>
 8000aca:	e01f      	b.n	8000b0c <radar_dataUnpack+0x25c>
            }
            else if(radar_tlvType == 9){ //temperature of Rx0,Rx1,Rx2,Rx3,Tx0,Tx1,Tx2,Pm,Dig0,Dig1 in Deg C
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d11c      	bne.n	8000b0c <radar_dataUnpack+0x25c>
                radar_rxDataBufCut(4);
 8000ad2:	2004      	movs	r0, #4
 8000ad4:	f7ff fe90 	bl	80007f8 <radar_rxDataBufCut>
                radar_rxDataBufCut(4);
 8000ad8:	2004      	movs	r0, #4
 8000ada:	f7ff fe8d 	bl	80007f8 <radar_rxDataBufCut>
                radar_getTime(radar_rxDataTemp);
 8000ade:	481d      	ldr	r0, [pc, #116]	; (8000b54 <radar_dataUnpack+0x2a4>)
 8000ae0:	f7ff fe16 	bl	8000710 <radar_getTime>
                for(int j=0;j<10;j++){
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	e00d      	b.n	8000b06 <radar_dataUnpack+0x256>
                    radar_rxDataBufCut(2); radar_temperature[j]=radar_getUint16(radar_rxDataTemp);
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff fe84 	bl	80007f8 <radar_rxDataBufCut>
 8000af0:	4818      	ldr	r0, [pc, #96]	; (8000b54 <radar_dataUnpack+0x2a4>)
 8000af2:	f7ff fdfb 	bl	80006ec <radar_getUint16>
 8000af6:	4602      	mov	r2, r0
 8000af8:	491b      	ldr	r1, [pc, #108]	; (8000b68 <radar_dataUnpack+0x2b8>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for(int j=0;j<10;j++){
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	3301      	adds	r3, #1
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	2b09      	cmp	r3, #9
 8000b0a:	ddee      	ble.n	8000aea <radar_dataUnpack+0x23a>
        for(int i=0;i<radar_packData.numTlv;i++){
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	3301      	adds	r3, #1
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <radar_dataUnpack+0x2a8>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f6ff af0b 	blt.w	8000934 <radar_dataUnpack+0x84>
                }
            }
        }
    }
    for(int i=0;i<radar_rxDataCnt;i++) radar_rxDataBuf[i] = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e007      	b.n	8000b34 <radar_dataUnpack+0x284>
 8000b24:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <radar_dataUnpack+0x2bc>)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4413      	add	r3, r2
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <radar_dataUnpack+0x2c0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dbf2      	blt.n	8000b24 <radar_dataUnpack+0x274>
    radar_rxDataCnt=0;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <radar_dataUnpack+0x2c0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
    radar_rxDataFlag=0;
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <radar_dataUnpack+0x2c4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000d28 	.word	0x20000d28
 8000b58:	2000175c 	.word	0x2000175c
 8000b5c:	20000d34 	.word	0x20000d34
 8000b60:	20000f14 	.word	0x20000f14
 8000b64:	2000173c 	.word	0x2000173c
 8000b68:	20001714 	.word	0x20001714
 8000b6c:	20000558 	.word	0x20000558
 8000b70:	20000554 	.word	0x20000554
 8000b74:	20000550 	.word	0x20000550

08000b78 <radar_cfgTransmit>:
/*----------------------------------------------------------------------------*/
/*--This functions is used to send configuration cfg.-------------------------*/
/*----------------------------------------------------------------------------*/
void radar_cfgTransmit(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b098      	sub	sp, #96	; 0x60
 8000b7c:	af00      	add	r7, sp, #0
	int radar_flagL=0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t radar_commandBuf[80];
	for(int radar_flagH=0;radar_flagH<sizeof(radar_chripCFG);radar_flagH++){
 8000b82:	2300      	movs	r3, #0
 8000b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b86:	e044      	b.n	8000c12 <radar_cfgTransmit+0x9a>
	    if((radar_chripCFG[radar_flagH]==32&&radar_chripCFG[radar_flagH+1]>=65)||radar_flagH==sizeof(radar_chripCFG)-1){
 8000b88:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <radar_cfgTransmit+0xac>)
 8000b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b20      	cmp	r3, #32
 8000b92:	d105      	bne.n	8000ba0 <radar_cfgTransmit+0x28>
 8000b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b96:	3301      	adds	r3, #1
 8000b98:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <radar_cfgTransmit+0xac>)
 8000b9a:	5cd3      	ldrb	r3, [r2, r3]
 8000b9c:	2b40      	cmp	r3, #64	; 0x40
 8000b9e:	d803      	bhi.n	8000ba8 <radar_cfgTransmit+0x30>
 8000ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ba2:	f5b3 7f37 	cmp.w	r3, #732	; 0x2dc
 8000ba6:	d131      	bne.n	8000c0c <radar_cfgTransmit+0x94>
	        for(int i=0;i<radar_flagH-radar_flagL;i++){
 8000ba8:	2300      	movs	r3, #0
 8000baa:	657b      	str	r3, [r7, #84]	; 0x54
 8000bac:	e00c      	b.n	8000bc8 <radar_cfgTransmit+0x50>
	            radar_commandBuf[i]=radar_chripCFG[radar_flagL+i];
 8000bae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <radar_cfgTransmit+0xac>)
 8000bb6:	5cd1      	ldrb	r1, [r2, r3]
 8000bb8:	1d3a      	adds	r2, r7, #4
 8000bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bbc:	4413      	add	r3, r2
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
	        for(int i=0;i<radar_flagH-radar_flagL;i++){
 8000bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8000bc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbec      	blt.n	8000bae <radar_cfgTransmit+0x36>
	        }
	        radar_commandBuf[radar_flagH-radar_flagL]=10;
 8000bd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	3360      	adds	r3, #96	; 0x60
 8000bdc:	443b      	add	r3, r7
 8000bde:	220a      	movs	r2, #10
 8000be0:	f803 2c5c 	strb.w	r2, [r3, #-92]
	        HAL_UART_Transmit(&huart7,radar_commandBuf,radar_flagH-radar_flagL+1,0xffff);
 8000be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	1d39      	adds	r1, r7, #4
 8000bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <radar_cfgTransmit+0xb0>)
 8000bfc:	f002 ff32 	bl	8003a64 <HAL_UART_Transmit>
	        radar_flagL=radar_flagH+1;
 8000c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c02:	3301      	adds	r3, #1
 8000c04:	65fb      	str	r3, [r7, #92]	; 0x5c
	        HAL_Delay(10);
 8000c06:	200a      	movs	r0, #10
 8000c08:	f000 fd24 	bl	8001654 <HAL_Delay>
	for(int radar_flagH=0;radar_flagH<sizeof(radar_chripCFG);radar_flagH++){
 8000c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c0e:	3301      	adds	r3, #1
 8000c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c14:	f5b3 7f37 	cmp.w	r3, #732	; 0x2dc
 8000c18:	d9b6      	bls.n	8000b88 <radar_cfgTransmit+0x10>
	    }
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3760      	adds	r7, #96	; 0x60
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000440 	.word	0x20000440

08000c2c <radar_debug>:
	HAL_UART_Transmit(&huart7,radar_stopComd,sizeof(radar_stopComd)-1,0xffff);
}
/*----------------------------------------------------------------------------*/
/*--For dubug-----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void radar_debug(){
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af02      	add	r7, sp, #8
	printf("totalPacketNumBytes = %d\n", radar_packData.totalPacketNumBytes);
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <radar_debug+0x78>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	4619      	mov	r1, r3
 8000c38:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <radar_debug+0x7c>)
 8000c3a:	f004 fa17 	bl	800506c <iprintf>
	printf("frameNumber         = %d\n", radar_packData.frameNumber);
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <radar_debug+0x78>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4819      	ldr	r0, [pc, #100]	; (8000cac <radar_debug+0x80>)
 8000c46:	f004 fa11 	bl	800506c <iprintf>
	printf("timeCpuCycles       = %d\n", radar_packData.timeCpuCycles);
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <radar_debug+0x78>)
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <radar_debug+0x84>)
 8000c52:	f004 fa0b 	bl	800506c <iprintf>
	printf("numDetObj           = %d\n", radar_packData.numDetObj);
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <radar_debug+0x78>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <radar_debug+0x88>)
 8000c5e:	f004 fa05 	bl	800506c <iprintf>
	printf("numTlv              = %d\n", radar_packData.numTlv);
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <radar_debug+0x78>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4619      	mov	r1, r3
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <radar_debug+0x8c>)
 8000c6a:	f004 f9ff 	bl	800506c <iprintf>
	printf("subFrameNumber      = %d\n", radar_packData.subFrameNumber);
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <radar_debug+0x78>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4811      	ldr	r0, [pc, #68]	; (8000cbc <radar_debug+0x90>)
 8000c76:	f004 f9f9 	bl	800506c <iprintf>
	printf("%d day %d : %d : %d . %d\n",radar_timeInfo[3],radar_timeInfo[4],radar_timeInfo[5],radar_timeInfo[6],radar_timeInfo[7]);
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <radar_debug+0x94>)
 8000c7c:	68d9      	ldr	r1, [r3, #12]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <radar_debug+0x94>)
 8000c80:	6918      	ldr	r0, [r3, #16]
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <radar_debug+0x94>)
 8000c84:	695c      	ldr	r4, [r3, #20]
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <radar_debug+0x94>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <radar_debug+0x94>)
 8000c8c:	69d2      	ldr	r2, [r2, #28]
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4623      	mov	r3, r4
 8000c94:	4602      	mov	r2, r0
 8000c96:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <radar_debug+0x98>)
 8000c98:	f004 f9e8 	bl	800506c <iprintf>
}
 8000c9c:	bf00      	nop
 8000c9e:	3704      	adds	r7, #4
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	2000175c 	.word	0x2000175c
 8000ca8:	08005fa8 	.word	0x08005fa8
 8000cac:	08005fc4 	.word	0x08005fc4
 8000cb0:	08005fe0 	.word	0x08005fe0
 8000cb4:	08005ffc 	.word	0x08005ffc
 8000cb8:	08006018 	.word	0x08006018
 8000cbc:	08006034 	.word	0x08006034
 8000cc0:	2000173c 	.word	0x2000173c
 8000cc4:	08006050 	.word	0x08006050

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f000 fc65 	bl	800159a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f836 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f000 f992 	bl	8000ffc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cd8:	f000 f8a4 	bl	8000e24 <MX_TIM1_Init>
  MX_UART7_Init();
 8000cdc:	f000 f92e 	bl	8000f3c <MX_UART7_Init>
  MX_USART3_UART_Init();
 8000ce0:	f000 f95c 	bl	8000f9c <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000ce4:	f000 f8f2 	bl	8000ecc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(radarRST_GPIO_Port, radarRST_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cee:	4810      	ldr	r0, [pc, #64]	; (8000d30 <main+0x68>)
 8000cf0:	f001 f824 	bl	8001d3c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f000 fcad 	bl	8001654 <HAL_Delay>
  HAL_GPIO_WritePin(radarRST_GPIO_Port, radarRST_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <main+0x68>)
 8000d02:	f001 f81b 	bl	8001d3c <HAL_GPIO_WritePin>
  HAL_Delay(500);														//radar initialization
 8000d06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d0a:	f000 fca3 	bl	8001654 <HAL_Delay>

  radar_cfgTransmit();													//configuration cfg transmission done
 8000d0e:	f7ff ff33 	bl	8000b78 <radar_cfgTransmit>
  HAL_UART_Receive_IT(&huart5,radar_rxDataBufTemp,2000);				//Begin to receive data
 8000d12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d16:	4907      	ldr	r1, [pc, #28]	; (8000d34 <main+0x6c>)
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <main+0x70>)
 8000d1a:	f002 ff26 	bl	8003b6a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(radar_rxDataFlag){
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <main+0x74>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0fb      	beq.n	8000d1e <main+0x56>
	  	  radar_dataUnpack();
 8000d26:	f7ff fdc3 	bl	80008b0 <radar_dataUnpack>
	  	  radar_debug();
 8000d2a:	f7ff ff7f 	bl	8000c2c <radar_debug>
	  if(radar_rxDataFlag){
 8000d2e:	e7f6      	b.n	8000d1e <main+0x56>
 8000d30:	40021400 	.word	0x40021400
 8000d34:	20000d30 	.word	0x20000d30
 8000d38:	200003b8 	.word	0x200003b8
 8000d3c:	20000550 	.word	0x20000550

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	; 0x50
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2234      	movs	r2, #52	; 0x34
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f004 f984 	bl	800505c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d64:	f001 f81e 	bl	8001da4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <SystemClock_Config+0xdc>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <SystemClock_Config+0xdc>)
 8000d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <SystemClock_Config+0xdc>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <SystemClock_Config+0xe0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <SystemClock_Config+0xe0>)
 8000d86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <SystemClock_Config+0xe0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dac:	2319      	movs	r3, #25
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000db0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000db4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 f84c 	bl	8001e64 <HAL_RCC_OscConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dd2:	f000 f981 	bl	80010d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dd6:	f000 fff5 	bl	8001dc4 <HAL_PWREx_EnableOverDrive>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000de0:	f000 f97a 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000df0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	2107      	movs	r1, #7
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fadc 	bl	80023c0 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e0e:	f000 f963 	bl	80010d8 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e44:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <MX_TIM1_Init+0xa4>)
 8000e46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e4a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 107;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e58:	226b      	movs	r2, #107	; 0x6b
 8000e5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e6e:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e70:	f002 f8b4 	bl	8002fdc <HAL_TIM_Base_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e7a:	f000 f92d 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000e8c:	f002 fac4 	bl	8003418 <HAL_TIM_ConfigClockSource>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e96:	f000 f91f 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_TIM1_Init+0xa0>)
 8000eac:	f002 fce0 	bl	8003870 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000eb6:	f000 f90f 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000036c 	.word	0x2000036c
 8000ec8:	40010000 	.word	0x40010000

08000ecc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_UART5_Init+0x68>)
 8000ed2:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <MX_UART5_Init+0x6c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_UART5_Init+0x68>)
 8000ed8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000edc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_UART5_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_UART5_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_UART5_Init+0x68>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_UART5_Init+0x68>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_UART5_Init+0x68>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <MX_UART5_Init+0x68>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_UART5_Init+0x68>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_UART5_Init+0x68>)
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_UART5_Init+0x68>)
 8000f10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
  huart5.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_UART5_Init+0x68>)
 8000f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_UART5_Init+0x68>)
 8000f20:	f002 fd52 	bl	80039c8 <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_UART5_Init+0x62>
  {
    Error_Handler();
 8000f2a:	f000 f8d5 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200003b8 	.word	0x200003b8
 8000f38:	40005000 	.word	0x40005000

08000f3c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f42:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <MX_UART7_Init+0x5c>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f62:	2208      	movs	r2, #8
 8000f64:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_UART7_Init+0x58>)
 8000f80:	f002 fd22 	bl	80039c8 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f000 f8a5 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000440 	.word	0x20000440
 8000f98:	40007800 	.word	0x40007800

08000f9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <MX_USART3_UART_Init+0x5c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fa8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000fac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fe0:	f002 fcf2 	bl	80039c8 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 f875 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200004c8 	.word	0x200004c8
 8000ff8:	40004800 	.word	0x40004800

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <MX_GPIO_Init+0xd0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a27      	ldr	r2, [pc, #156]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a21      	ldr	r2, [pc, #132]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(radarRST_GPIO_Port, radarRST_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	4815      	ldr	r0, [pc, #84]	; (80010d0 <MX_GPIO_Init+0xd4>)
 800107a:	f000 fe5f 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS0_GPIO_Port, DS0_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2102      	movs	r1, #2
 8001082:	4814      	ldr	r0, [pc, #80]	; (80010d4 <MX_GPIO_Init+0xd8>)
 8001084:	f000 fe5a 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : radarRST_Pin */
  GPIO_InitStruct.Pin = radarRST_Pin;
 8001088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800108e:	2311      	movs	r3, #17
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	2301      	movs	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(radarRST_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <MX_GPIO_Init+0xd4>)
 80010a2:	f000 fc9f 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS0_Pin */
  GPIO_InitStruct.Pin = DS0_Pin;
 80010a6:	2302      	movs	r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS0_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_GPIO_Init+0xd8>)
 80010be:	f000 fc91 	bl	80019e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40020400 	.word	0x40020400

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_MspInit+0x44>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_MspInit+0x44>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_MspInit+0x44>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_MspInit+0x44>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_MspInit+0x44>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_MspInit+0x44>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_TIM_Base_MspInit+0x44>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d113      	bne.n	8001166 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_TIM_Base_MspInit+0x48>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <HAL_TIM_Base_MspInit+0x48>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_TIM_Base_MspInit+0x48>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2019      	movs	r0, #25
 800115c:	f000 fb79 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001160:	2019      	movs	r0, #25
 8001162:	f000 fb92 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40010000 	.word	0x40010000
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0b2      	sub	sp, #200	; 0xc8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	2290      	movs	r2, #144	; 0x90
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f003 ff5f 	bl	800505c <memset>
  if(huart->Instance==UART5)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a69      	ldr	r2, [pc, #420]	; (8001348 <HAL_UART_MspInit+0x1d0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d145      	bne.n	8001234 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fae8 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011c2:	f7ff ff89 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80011c6:	4b61      	ldr	r3, [pc, #388]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a60      	ldr	r2, [pc, #384]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80011cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b5e      	ldr	r3, [pc, #376]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011da:	623b      	str	r3, [r7, #32]
 80011dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b5b      	ldr	r3, [pc, #364]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b58      	ldr	r3, [pc, #352]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001210:	2308      	movs	r3, #8
 8001212:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800121a:	4619      	mov	r1, r3
 800121c:	484c      	ldr	r0, [pc, #304]	; (8001350 <HAL_UART_MspInit+0x1d8>)
 800121e:	f000 fbe1 	bl	80019e4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2035      	movs	r0, #53	; 0x35
 8001228:	f000 fb13 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800122c:	2035      	movs	r0, #53	; 0x35
 800122e:	f000 fb2c 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001232:	e084      	b.n	800133e <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a46      	ldr	r2, [pc, #280]	; (8001354 <HAL_UART_MspInit+0x1dc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d13d      	bne.n	80012ba <HAL_UART_MspInit+0x142>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fa9c 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_UART_MspInit+0xe6>
      Error_Handler();
 800125a:	f7ff ff3d 	bl	80010d8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_UART_MspInit+0x1d4>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a3a      	ldr	r2, [pc, #232]	; (800134c <HAL_UART_MspInit+0x1d4>)
 8001264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <HAL_UART_MspInit+0x1d4>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <HAL_UART_MspInit+0x1d4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a34      	ldr	r2, [pc, #208]	; (800134c <HAL_UART_MspInit+0x1d4>)
 800127c:	f043 0320 	orr.w	r3, r3, #32
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <HAL_UART_MspInit+0x1d4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128e:	23c0      	movs	r3, #192	; 0xc0
 8001290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80012a6:	2308      	movs	r3, #8
 80012a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4829      	ldr	r0, [pc, #164]	; (8001358 <HAL_UART_MspInit+0x1e0>)
 80012b4:	f000 fb96 	bl	80019e4 <HAL_GPIO_Init>
}
 80012b8:	e041      	b.n	800133e <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART3)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a27      	ldr	r2, [pc, #156]	; (800135c <HAL_UART_MspInit+0x1e4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d13c      	bne.n	800133e <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 fa5a 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0x16a>
      Error_Handler();
 80012de:	f7ff fefb 	bl	80010d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_UART_MspInit+0x1d4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_UART_MspInit+0x1d4>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_UART_MspInit+0x1d4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001312:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001316:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800132c:	2307      	movs	r3, #7
 800132e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_UART_MspInit+0x1d8>)
 800133a:	f000 fb53 	bl	80019e4 <HAL_GPIO_Init>
}
 800133e:	bf00      	nop
 8001340:	37c8      	adds	r7, #200	; 0xc8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40005000 	.word	0x40005000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400
 8001354:	40007800 	.word	0x40007800
 8001358:	40021400 	.word	0x40021400
 800135c:	40004800 	.word	0x40004800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f932 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013ba:	f001 ff0e 	bl	80031da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000036c 	.word	0x2000036c

080013c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <UART5_IRQHandler+0x10>)
 80013ce:	f002 fc11 	bl	8003bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200003b8 	.word	0x200003b8

080013dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e00a      	b.n	8001404 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ee:	f3af 8000 	nop.w
 80013f2:	4601      	mov	r1, r0
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	b2ca      	uxtb	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf0      	blt.n	80013ee <_read+0x12>
  }

  return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e009      	b.n	800143c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f8d7 	bl	80005e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf1      	blt.n	8001428 <_write+0x12>
  }
  return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_close>:

int _close(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001476:	605a      	str	r2, [r3, #4]
  return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_isatty>:

int _isatty(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f003 fd80 	bl	8004fec <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20080000 	.word	0x20080000
 8001518:	00000400 	.word	0x00000400
 800151c:	2000177c 	.word	0x2000177c
 8001520:	20001798 	.word	0x20001798

08001524 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001564:	4c0b      	ldr	r4, [pc, #44]	; (8001594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001572:	f7ff ffd7 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f003 fd3f 	bl	8004ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff fba5 	bl	8000cc8 <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800158c:	0800612c 	.word	0x0800612c
  ldr r2, =_sbss
 8001590:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001594:	20001794 	.word	0x20001794

08001598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC_IRQHandler>

0800159a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159e:	2003      	movs	r0, #3
 80015a0:	f000 f94c 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a4:	200f      	movs	r0, #15
 80015a6:	f000 f805 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015aa:	f7ff fd9b 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f967 	bl	80018a6 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f92f 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200002e0 	.word	0x200002e0
 800160c:	200002e8 	.word	0x200002e8
 8001610:	200002e4 	.word	0x200002e4

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200002e8 	.word	0x200002e8
 8001638:	20001780 	.word	0x20001780

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20001780 	.word	0x20001780

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ffee 	bl	800163c <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_Delay+0x44>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffde 	bl	800163c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200002e8 	.word	0x200002e8

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <__NVIC_SetPriorityGrouping+0x40>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x40>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00
 80016e0:	05fa0000 	.word	0x05fa0000

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <__NVIC_EnableIRQ+0x38>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff8e 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff29 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff3e 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff8e 	bl	8001790 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5d 	bl	800173c <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff31 	bl	8001700 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff feb6 	bl	800163c <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d008      	beq.n	80018f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e052      	b.n	8001996 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0216 	bic.w	r2, r2, #22
 80018fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800190e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d103      	bne.n	8001920 <HAL_DMA_Abort+0x62>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0208 	bic.w	r2, r2, #8
 800192e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001940:	e013      	b.n	800196a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001942:	f7ff fe7b 	bl	800163c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b05      	cmp	r3, #5
 800194e:	d90c      	bls.n	800196a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2220      	movs	r2, #32
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2203      	movs	r2, #3
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e015      	b.n	8001996 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e4      	bne.n	8001942 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	223f      	movs	r2, #63	; 0x3f
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d004      	beq.n	80019bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e00c      	b.n	80019d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2205      	movs	r2, #5
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e175      	b.n	8001cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8164 	bne.w	8001cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d005      	beq.n	8001a3a <HAL_GPIO_Init+0x56>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d130      	bne.n	8001a9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 0201 	and.w	r2, r3, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d017      	beq.n	8001ad8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d123      	bne.n	8001b2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	69b9      	ldr	r1, [r7, #24]
 8001b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80be 	beq.w	8001cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <HAL_GPIO_Init+0x324>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <HAL_GPIO_Init+0x324>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_GPIO_Init+0x324>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b86:	4a61      	ldr	r2, [pc, #388]	; (8001d0c <HAL_GPIO_Init+0x328>)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_GPIO_Init+0x32c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d037      	beq.n	8001c22 <HAL_GPIO_Init+0x23e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a57      	ldr	r2, [pc, #348]	; (8001d14 <HAL_GPIO_Init+0x330>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d031      	beq.n	8001c1e <HAL_GPIO_Init+0x23a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a56      	ldr	r2, [pc, #344]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d02b      	beq.n	8001c1a <HAL_GPIO_Init+0x236>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a55      	ldr	r2, [pc, #340]	; (8001d1c <HAL_GPIO_Init+0x338>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d025      	beq.n	8001c16 <HAL_GPIO_Init+0x232>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a54      	ldr	r2, [pc, #336]	; (8001d20 <HAL_GPIO_Init+0x33c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d01f      	beq.n	8001c12 <HAL_GPIO_Init+0x22e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a53      	ldr	r2, [pc, #332]	; (8001d24 <HAL_GPIO_Init+0x340>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d019      	beq.n	8001c0e <HAL_GPIO_Init+0x22a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a52      	ldr	r2, [pc, #328]	; (8001d28 <HAL_GPIO_Init+0x344>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x226>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_GPIO_Init+0x348>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x222>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a50      	ldr	r2, [pc, #320]	; (8001d30 <HAL_GPIO_Init+0x34c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x21e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <HAL_GPIO_Init+0x350>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x21a>
 8001bfa:	2309      	movs	r3, #9
 8001bfc:	e012      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001bfe:	230a      	movs	r3, #10
 8001c00:	e010      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c02:	2308      	movs	r3, #8
 8001c04:	e00e      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c06:	2307      	movs	r3, #7
 8001c08:	e00c      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	e00a      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c0e:	2305      	movs	r3, #5
 8001c10:	e008      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e004      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x240>
 8001c22:	2300      	movs	r3, #0
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f002 0203 	and.w	r2, r2, #3
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c34:	4935      	ldr	r1, [pc, #212]	; (8001d0c <HAL_GPIO_Init+0x328>)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_GPIO_Init+0x354>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c66:	4a34      	ldr	r2, [pc, #208]	; (8001d38 <HAL_GPIO_Init+0x354>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_GPIO_Init+0x354>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c90:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <HAL_GPIO_Init+0x354>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_GPIO_Init+0x354>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_GPIO_Init+0x354>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_GPIO_Init+0x354>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <HAL_GPIO_Init+0x354>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	f67f ae86 	bls.w	8001a04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40021400 	.word	0x40021400
 8001d28:	40021800 	.word	0x40021800
 8001d2c:	40021c00 	.word	0x40021c00
 8001d30:	40022000 	.word	0x40022000
 8001d34:	40022400 	.word	0x40022400
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d58:	e003      	b.n	8001d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	041a      	lsls	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	619a      	str	r2, [r3, #24]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	041a      	lsls	r2, r3, #16
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	400b      	ands	r3, r1
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df2:	f7ff fc23 	bl	800163c <HAL_GetTick>
 8001df6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001df8:	e009      	b.n	8001e0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dfa:	f7ff fc1f 	bl	800163c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e08:	d901      	bls.n	8001e0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e022      	b.n	8001e54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e28:	f7ff fc08 	bl	800163c <HAL_GetTick>
 8001e2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e2e:	e009      	b.n	8001e44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e30:	f7ff fc04 	bl	800163c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e3e:	d901      	bls.n	8001e44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e007      	b.n	8001e54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e50:	d1ee      	bne.n	8001e30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e29b      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8087 	beq.w	8001f96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e88:	4b96      	ldr	r3, [pc, #600]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d00c      	beq.n	8001eae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e94:	4b93      	ldr	r3, [pc, #588]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d112      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x62>
 8001ea0:	4b90      	ldr	r3, [pc, #576]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eac:	d10b      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eae:	4b8d      	ldr	r3, [pc, #564]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d06c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x130>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d168      	bne.n	8001f94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e275      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x7a>
 8001ed0:	4b84      	ldr	r3, [pc, #528]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a83      	ldr	r2, [pc, #524]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e02e      	b.n	8001f3c <HAL_RCC_OscConfig+0xd8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x9c>
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7e      	ldr	r2, [pc, #504]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b7c      	ldr	r3, [pc, #496]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7b      	ldr	r2, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0xd8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0xc0>
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a75      	ldr	r2, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b73      	ldr	r3, [pc, #460]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a72      	ldr	r2, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0xd8>
 8001f24:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6b      	ldr	r2, [pc, #428]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff fb7a 	bl	800163c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fb76 	bl	800163c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e229      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0xe8>
 8001f6a:	e014      	b.n	8001f96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fb66 	bl	800163c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff fb62 	bl	800163c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e215      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	4b57      	ldr	r3, [pc, #348]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x110>
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d069      	beq.n	8002076 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa2:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b4d      	ldr	r3, [pc, #308]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x190>
 8001fba:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x17a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1e9      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	493d      	ldr	r1, [pc, #244]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e040      	b.n	8002076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d023      	beq.n	8002044 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a38      	ldr	r2, [pc, #224]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff fb18 	bl	800163c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff fb14 	bl	800163c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1c7      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4929      	ldr	r1, [pc, #164]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
 8002042:	e018      	b.n	8002076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff faf4 	bl	800163c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff faf0 	bl	800163c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1a3      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d038      	beq.n	80020f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d019      	beq.n	80020be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7ff fad1 	bl	800163c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209e:	f7ff facd 	bl	800163c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e180      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x23a>
 80020bc:	e01a      	b.n	80020f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 80020c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_RCC_OscConfig+0x280>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7ff fab7 	bl	800163c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d2:	f7ff fab3 	bl	800163c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d903      	bls.n	80020e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e166      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
 80020e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b92      	ldr	r3, [pc, #584]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a4 	beq.w	800224a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a88      	ldr	r2, [pc, #544]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b86      	ldr	r3, [pc, #536]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002126:	2301      	movs	r3, #1
 8002128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212a:	4b83      	ldr	r3, [pc, #524]	; (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d118      	bne.n	8002168 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002136:	4b80      	ldr	r3, [pc, #512]	; (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7f      	ldr	r2, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002142:	f7ff fa7b 	bl	800163c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7ff fa77 	bl	800163c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b64      	cmp	r3, #100	; 0x64
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e12a      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215c:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x4d4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x31a>
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a6f      	ldr	r2, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	e02d      	b.n	80021da <HAL_RCC_OscConfig+0x376>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x33c>
 8002186:	4b6b      	ldr	r3, [pc, #428]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a6a      	ldr	r2, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	4b68      	ldr	r3, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a67      	ldr	r2, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	e01c      	b.n	80021da <HAL_RCC_OscConfig+0x376>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x35e>
 80021a8:	4b62      	ldr	r3, [pc, #392]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a61      	ldr	r2, [pc, #388]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b5f      	ldr	r3, [pc, #380]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a5e      	ldr	r2, [pc, #376]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	e00b      	b.n	80021da <HAL_RCC_OscConfig+0x376>
 80021c2:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a5b      	ldr	r2, [pc, #364]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d015      	beq.n	800220e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7ff fa2b 	bl	800163c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7ff fa27 	bl	800163c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0d8      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ee      	beq.n	80021ea <HAL_RCC_OscConfig+0x386>
 800220c:	e014      	b.n	8002238 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7ff fa15 	bl	800163c <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7ff fa11 	bl	800163c <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0c2      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a3c      	ldr	r2, [pc, #240]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80ae 	beq.w	80023b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002254:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d06d      	beq.n	800233c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d14b      	bne.n	8002300 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a31      	ldr	r2, [pc, #196]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 800226e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f9e2 	bl	800163c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f9de 	bl	800163c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e091      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	019b      	lsls	r3, r3, #6
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	3b01      	subs	r3, #1
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	071b      	lsls	r3, r3, #28
 80022c6:	491b      	ldr	r1, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7ff f9b0 	bl	800163c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff f9ac 	bl	800163c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e05f      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x47c>
 80022fe:	e057      	b.n	80023b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff f996 	bl	800163c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff f992 	bl	800163c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e045      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x4b0>
 8002332:	e03d      	b.n	80023b0 <HAL_RCC_OscConfig+0x54c>
 8002334:	40023800 	.word	0x40023800
 8002338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <HAL_RCC_OscConfig+0x558>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d030      	beq.n	80023ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d129      	bne.n	80023ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d122      	bne.n	80023ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002372:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002374:	4293      	cmp	r3, r2
 8002376:	d119      	bne.n	80023ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d10f      	bne.n	80023ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d0      	b.n	800257a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d910      	bls.n	8002408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b67      	ldr	r3, [pc, #412]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 020f 	bic.w	r2, r3, #15
 80023ee:	4965      	ldr	r1, [pc, #404]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0b8      	b.n	800257a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002420:	4b59      	ldr	r3, [pc, #356]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800242a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 800243e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002442:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	494d      	ldr	r1, [pc, #308]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d040      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d115      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07f      	b.n	800257a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e073      	b.n	800257a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06b      	b.n	800257a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f023 0203 	bic.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4936      	ldr	r1, [pc, #216]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7ff f8c2 	bl	800163c <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7ff f8be 	bl	800163c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e053      	b.n	800257a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 020c 	and.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1eb      	bne.n	80024bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d210      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 020f 	bic.w	r2, r3, #15
 80024fa:	4922      	ldr	r1, [pc, #136]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e032      	b.n	800257a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4916      	ldr	r1, [pc, #88]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	490e      	ldr	r1, [pc, #56]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002552:	f000 f821 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002556:	4602      	mov	r2, r0
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	490a      	ldr	r1, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x1cc>)
 8002564:	5ccb      	ldrb	r3, [r1, r3]
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1d0>)
 800256c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_ClockConfig+0x1d4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f81e 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023c00 	.word	0x40023c00
 8002588:	40023800 	.word	0x40023800
 800258c:	0800606c 	.word	0x0800606c
 8002590:	200002e0 	.word	0x200002e0
 8002594:	200002e4 	.word	0x200002e4

08002598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800259c:	b090      	sub	sp, #64	; 0x40
 800259e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
 80025a4:	2300      	movs	r3, #0
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a8:	2300      	movs	r3, #0
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d00d      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x40>
 80025bc:	2b08      	cmp	r3, #8
 80025be:	f200 80a1 	bhi.w	8002704 <HAL_RCC_GetSysClockFreq+0x16c>
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x34>
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ca:	e09b      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_GetSysClockFreq+0x184>)
 80025ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025d0:	e09b      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025d2:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCC_GetSysClockFreq+0x188>)
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025d6:	e098      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d8:	4b4f      	ldr	r3, [pc, #316]	; (8002718 <HAL_RCC_GetSysClockFreq+0x180>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025e2:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_RCC_GetSysClockFreq+0x180>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d028      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ee:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	099b      	lsrs	r3, r3, #6
 80025f4:	2200      	movs	r2, #0
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	627a      	str	r2, [r7, #36]	; 0x24
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002600:	2100      	movs	r1, #0
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_GetSysClockFreq+0x188>)
 8002604:	fb03 f201 	mul.w	r2, r3, r1
 8002608:	2300      	movs	r3, #0
 800260a:	fb00 f303 	mul.w	r3, r0, r3
 800260e:	4413      	add	r3, r2
 8002610:	4a43      	ldr	r2, [pc, #268]	; (8002720 <HAL_RCC_GetSysClockFreq+0x188>)
 8002612:	fba0 1202 	umull	r1, r2, r0, r2
 8002616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002618:	460a      	mov	r2, r1
 800261a:	62ba      	str	r2, [r7, #40]	; 0x28
 800261c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261e:	4413      	add	r3, r2
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002624:	2200      	movs	r2, #0
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	61fa      	str	r2, [r7, #28]
 800262a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800262e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002632:	f7fd fe55 	bl	80002e0 <__aeabi_uldivmod>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4613      	mov	r3, r2
 800263c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800263e:	e053      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002640:	4b35      	ldr	r3, [pc, #212]	; (8002718 <HAL_RCC_GetSysClockFreq+0x180>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	2200      	movs	r2, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	617a      	str	r2, [r7, #20]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002652:	f04f 0b00 	mov.w	fp, #0
 8002656:	4652      	mov	r2, sl
 8002658:	465b      	mov	r3, fp
 800265a:	f04f 0000 	mov.w	r0, #0
 800265e:	f04f 0100 	mov.w	r1, #0
 8002662:	0159      	lsls	r1, r3, #5
 8002664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002668:	0150      	lsls	r0, r2, #5
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	ebb2 080a 	subs.w	r8, r2, sl
 8002672:	eb63 090b 	sbc.w	r9, r3, fp
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002682:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002686:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800268a:	ebb2 0408 	subs.w	r4, r2, r8
 800268e:	eb63 0509 	sbc.w	r5, r3, r9
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	00eb      	lsls	r3, r5, #3
 800269c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a0:	00e2      	lsls	r2, r4, #3
 80026a2:	4614      	mov	r4, r2
 80026a4:	461d      	mov	r5, r3
 80026a6:	eb14 030a 	adds.w	r3, r4, sl
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	eb45 030b 	adc.w	r3, r5, fp
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026be:	4629      	mov	r1, r5
 80026c0:	028b      	lsls	r3, r1, #10
 80026c2:	4621      	mov	r1, r4
 80026c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c8:	4621      	mov	r1, r4
 80026ca:	028a      	lsls	r2, r1, #10
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d2:	2200      	movs	r2, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	60fa      	str	r2, [r7, #12]
 80026d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026dc:	f7fd fe00 	bl	80002e0 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4613      	mov	r3, r2
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	3301      	adds	r3, #1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80026f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002702:	e002      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetSysClockFreq+0x184>)
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800270c:	4618      	mov	r0, r3
 800270e:	3740      	adds	r7, #64	; 0x40
 8002710:	46bd      	mov	sp, r7
 8002712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	00f42400 	.word	0x00f42400
 8002720:	017d7840 	.word	0x017d7840

08002724 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_RCC_GetHCLKFreq+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	200002e0 	.word	0x200002e0

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff0 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0a9b      	lsrs	r3, r3, #10
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	0800607c 	.word	0x0800607c

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffdc 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0b5b      	lsrs	r3, r3, #13
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	0800607c 	.word	0x0800607c

0800278c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d012      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027b4:	4b69      	ldr	r3, [pc, #420]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a68      	ldr	r2, [pc, #416]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027be:	6093      	str	r3, [r2, #8]
 80027c0:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	4964      	ldr	r1, [pc, #400]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d017      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e6:	4b5d      	ldr	r3, [pc, #372]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	4959      	ldr	r1, [pc, #356]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002804:	d101      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d017      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002822:	4b4e      	ldr	r3, [pc, #312]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002828:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	494a      	ldr	r1, [pc, #296]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002840:	d101      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 808b 	beq.w	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002870:	4b3a      	ldr	r3, [pc, #232]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	4a39      	ldr	r2, [pc, #228]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287a:	6413      	str	r3, [r2, #64]	; 0x40
 800287c:	4b37      	ldr	r3, [pc, #220]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002888:	4b35      	ldr	r3, [pc, #212]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a34      	ldr	r2, [pc, #208]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fed2 	bl	800163c <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fe fece 	bl	800163c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e38f      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ba:	4b28      	ldr	r3, [pc, #160]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d035      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d02e      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d114      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fe96 	bl	800163c <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fe fe92 	bl	800163c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e351      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ee      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002942:	d111      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002952:	400b      	ands	r3, r1
 8002954:	4901      	ldr	r1, [pc, #4]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
 800295a:	e00b      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800295c:	40023800 	.word	0x40023800
 8002960:	40007000 	.word	0x40007000
 8002964:	0ffffcff 	.word	0x0ffffcff
 8002968:	4bac      	ldr	r3, [pc, #688]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4aab      	ldr	r2, [pc, #684]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002972:	6093      	str	r3, [r2, #8]
 8002974:	4ba9      	ldr	r3, [pc, #676]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	49a6      	ldr	r1, [pc, #664]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002982:	4313      	orrs	r3, r2
 8002984:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d010      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002992:	4ba2      	ldr	r3, [pc, #648]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002998:	4aa0      	ldr	r2, [pc, #640]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029a2:	4b9e      	ldr	r3, [pc, #632]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	499b      	ldr	r1, [pc, #620]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c0:	4b96      	ldr	r3, [pc, #600]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ce:	4993      	ldr	r1, [pc, #588]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029e2:	4b8e      	ldr	r3, [pc, #568]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f0:	498a      	ldr	r1, [pc, #552]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a04:	4b85      	ldr	r3, [pc, #532]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a12:	4982      	ldr	r1, [pc, #520]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a26:	4b7d      	ldr	r3, [pc, #500]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4979      	ldr	r1, [pc, #484]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a48:	4b74      	ldr	r3, [pc, #464]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4971      	ldr	r1, [pc, #452]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f023 020c 	bic.w	r2, r3, #12
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	4968      	ldr	r1, [pc, #416]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a8c:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	4960      	ldr	r1, [pc, #384]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aae:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	4957      	ldr	r1, [pc, #348]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ad0:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	494f      	ldr	r1, [pc, #316]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002af2:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	4946      	ldr	r1, [pc, #280]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	493e      	ldr	r1, [pc, #248]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b44:	4935      	ldr	r1, [pc, #212]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b58:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b66:	492d      	ldr	r1, [pc, #180]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d011      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b88:	4924      	ldr	r1, [pc, #144]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b98:	d101      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc8:	4914      	ldr	r1, [pc, #80]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bec:	490b      	ldr	r1, [pc, #44]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00f      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c10:	4902      	ldr	r1, [pc, #8]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c18:	e002      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c2c:	4b8a      	ldr	r3, [pc, #552]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	4986      	ldr	r1, [pc, #536]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c50:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c60:	497d      	ldr	r1, [pc, #500]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d006      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80d6 	beq.w	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c7c:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a75      	ldr	r2, [pc, #468]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c88:	f7fe fcd8 	bl	800163c <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c90:	f7fe fcd4 	bl	800163c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e195      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d021      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11d      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cc2:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cd0:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd6:	0e1b      	lsrs	r3, r3, #24
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	019a      	lsls	r2, r3, #6
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	071b      	lsls	r3, r3, #28
 8002cf6:	4958      	ldr	r1, [pc, #352]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02e      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d28:	d129      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d2a:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d38:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3e:	0f1b      	lsrs	r3, r3, #28
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	019a      	lsls	r2, r3, #6
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	071b      	lsls	r3, r3, #28
 8002d5e:	493e      	ldr	r1, [pc, #248]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6c:	f023 021f 	bic.w	r2, r3, #31
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	3b01      	subs	r3, #1
 8002d76:	4938      	ldr	r1, [pc, #224]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01d      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d8a:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d90:	0e1b      	lsrs	r3, r3, #24
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9e:	0f1b      	lsrs	r3, r3, #28
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	071b      	lsls	r3, r3, #28
 8002dbe:	4926      	ldr	r1, [pc, #152]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d011      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	019a      	lsls	r2, r3, #6
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	071b      	lsls	r3, r3, #28
 8002dee:	491a      	ldr	r1, [pc, #104]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e02:	f7fe fc1b 	bl	800163c <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e0a:	f7fe fc17 	bl	800163c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d901      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0d8      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	f040 80ce 	bne.w	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fbfe 	bl	800163c <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e42:	e00b      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e44:	f7fe fbfa 	bl	800163c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d904      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0bb      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e5c:	4b5e      	ldr	r3, [pc, #376]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e68:	d0ec      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d02e      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d12a      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e92:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ea0:	4b4d      	ldr	r3, [pc, #308]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	0f1b      	lsrs	r3, r3, #28
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	019a      	lsls	r2, r3, #6
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	4944      	ldr	r1, [pc, #272]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ece:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	493d      	ldr	r1, [pc, #244]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d022      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002efc:	d11d      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	0e1b      	lsrs	r3, r3, #24
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	0f1b      	lsrs	r3, r3, #28
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	019a      	lsls	r2, r3, #6
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	4929      	ldr	r1, [pc, #164]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d028      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	0e1b      	lsrs	r3, r3, #24
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f54:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	0c1b      	lsrs	r3, r3, #16
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	019a      	lsls	r2, r3, #6
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	071b      	lsls	r3, r3, #28
 8002f7a:	4917      	ldr	r1, [pc, #92]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	4911      	ldr	r1, [pc, #68]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fb4a 	bl	800163c <HAL_GetTick>
 8002fa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fac:	f7fe fb46 	bl	800163c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e007      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fca:	d1ef      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800

08002fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e049      	b.n	8003082 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe f892 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f000 faee 	bl	80035fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e054      	b.n	800314e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_TIM_Base_Start_IT+0xd0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d022      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ce:	d01d      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a22      	ldr	r2, [pc, #136]	; (8003160 <HAL_TIM_Base_Start_IT+0xd4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d018      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a21      	ldr	r2, [pc, #132]	; (8003164 <HAL_TIM_Base_Start_IT+0xd8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <HAL_TIM_Base_Start_IT+0xdc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00e      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1e      	ldr	r2, [pc, #120]	; (800316c <HAL_TIM_Base_Start_IT+0xe0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <HAL_TIM_Base_Start_IT+0xe4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <HAL_TIM_Base_Start_IT+0xe8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d115      	bne.n	8003138 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_TIM_Base_Start_IT+0xec>)
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b06      	cmp	r3, #6
 800311c:	d015      	beq.n	800314a <HAL_TIM_Base_Start_IT+0xbe>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d011      	beq.n	800314a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003136:	e008      	b.n	800314a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e000      	b.n	800314c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010000 	.word	0x40010000
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40010400 	.word	0x40010400
 8003170:	40014000 	.word	0x40014000
 8003174:	40001800 	.word	0x40001800
 8003178:	00010007 	.word	0x00010007

0800317c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	f241 1311 	movw	r3, #4369	; 0x1111
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <HAL_TIM_Base_Stop_IT+0x48>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a1a      	ldr	r2, [r3, #32]
 80031aa:	f240 4344 	movw	r3, #1092	; 0x444
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_TIM_Base_Stop_IT+0x48>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d122      	bne.n	8003236 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d11b      	bne.n	8003236 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0202 	mvn.w	r2, #2
 8003206:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9cf 	bl	80035c0 <HAL_TIM_IC_CaptureCallback>
 8003222:	e005      	b.n	8003230 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f9c1 	bl	80035ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f9d2 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d122      	bne.n	800328a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d11b      	bne.n	800328a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0204 	mvn.w	r2, #4
 800325a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f9a5 	bl	80035c0 <HAL_TIM_IC_CaptureCallback>
 8003276:	e005      	b.n	8003284 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f997 	bl	80035ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f9a8 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d122      	bne.n	80032de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d11b      	bne.n	80032de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f06f 0208 	mvn.w	r2, #8
 80032ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2204      	movs	r2, #4
 80032b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f97b 	bl	80035c0 <HAL_TIM_IC_CaptureCallback>
 80032ca:	e005      	b.n	80032d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f96d 	bl	80035ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f97e 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d122      	bne.n	8003332 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d11b      	bne.n	8003332 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0210 	mvn.w	r2, #16
 8003302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2208      	movs	r2, #8
 8003308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f951 	bl	80035c0 <HAL_TIM_IC_CaptureCallback>
 800331e:	e005      	b.n	800332c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f943 	bl	80035ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f954 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d10e      	bne.n	800335e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f06f 0201 	mvn.w	r2, #1
 8003356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fd f955 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d10e      	bne.n	800338a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b80      	cmp	r3, #128	; 0x80
 8003378:	d107      	bne.n	800338a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fb0b 	bl	80039a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003398:	d10e      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d107      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fafe 	bl	80039b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f902 	bl	80035e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0220 	mvn.w	r2, #32
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fabe 	bl	800398c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_TIM_ConfigClockSource+0x1c>
 8003430:	2302      	movs	r3, #2
 8003432:	e0b4      	b.n	800359e <HAL_TIM_ConfigClockSource+0x186>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <HAL_TIM_ConfigClockSource+0x190>)
 8003450:	4013      	ands	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800345a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346c:	d03e      	beq.n	80034ec <HAL_TIM_ConfigClockSource+0xd4>
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003472:	f200 8087 	bhi.w	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	f000 8086 	beq.w	800358a <HAL_TIM_ConfigClockSource+0x172>
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003482:	d87f      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b70      	cmp	r3, #112	; 0x70
 8003486:	d01a      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xa6>
 8003488:	2b70      	cmp	r3, #112	; 0x70
 800348a:	d87b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 800348c:	2b60      	cmp	r3, #96	; 0x60
 800348e:	d050      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x11a>
 8003490:	2b60      	cmp	r3, #96	; 0x60
 8003492:	d877      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b50      	cmp	r3, #80	; 0x50
 8003496:	d03c      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xfa>
 8003498:	2b50      	cmp	r3, #80	; 0x50
 800349a:	d873      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d058      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x13a>
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d86f      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b30      	cmp	r3, #48	; 0x30
 80034a6:	d064      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	2b30      	cmp	r3, #48	; 0x30
 80034aa:	d86b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d060      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15a>
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d867      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05c      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15a>
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d05a      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15a>
 80034bc:	e062      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f000 f9af 	bl	8003830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
      break;
 80034ea:	e04f      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f000 f998 	bl	8003830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800350e:	609a      	str	r2, [r3, #8]
      break;
 8003510:	e03c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	461a      	mov	r2, r3
 8003520:	f000 f90c 	bl	800373c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2150      	movs	r1, #80	; 0x50
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f965 	bl	80037fa <TIM_ITRx_SetConfig>
      break;
 8003530:	e02c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	461a      	mov	r2, r3
 8003540:	f000 f92b 	bl	800379a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2160      	movs	r1, #96	; 0x60
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f955 	bl	80037fa <TIM_ITRx_SetConfig>
      break;
 8003550:	e01c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	461a      	mov	r2, r3
 8003560:	f000 f8ec 	bl	800373c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f945 	bl	80037fa <TIM_ITRx_SetConfig>
      break;
 8003570:	e00c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f000 f93c 	bl	80037fa <TIM_ITRx_SetConfig>
      break;
 8003582:	e003      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e000      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800358a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	fffeff88 	.word	0xfffeff88

080035ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a40      	ldr	r2, [pc, #256]	; (8003710 <TIM_Base_SetConfig+0x114>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361a:	d00f      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3d      	ldr	r2, [pc, #244]	; (8003714 <TIM_Base_SetConfig+0x118>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <TIM_Base_SetConfig+0x11c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3b      	ldr	r2, [pc, #236]	; (800371c <TIM_Base_SetConfig+0x120>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <TIM_Base_SetConfig+0x124>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d108      	bne.n	800364e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2f      	ldr	r2, [pc, #188]	; (8003710 <TIM_Base_SetConfig+0x114>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02b      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365c:	d027      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <TIM_Base_SetConfig+0x118>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d023      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2b      	ldr	r2, [pc, #172]	; (8003718 <TIM_Base_SetConfig+0x11c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01f      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <TIM_Base_SetConfig+0x120>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01b      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a29      	ldr	r2, [pc, #164]	; (8003720 <TIM_Base_SetConfig+0x124>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d017      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a28      	ldr	r2, [pc, #160]	; (8003724 <TIM_Base_SetConfig+0x128>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a27      	ldr	r2, [pc, #156]	; (8003728 <TIM_Base_SetConfig+0x12c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00f      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a26      	ldr	r2, [pc, #152]	; (800372c <TIM_Base_SetConfig+0x130>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00b      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a25      	ldr	r2, [pc, #148]	; (8003730 <TIM_Base_SetConfig+0x134>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a24      	ldr	r2, [pc, #144]	; (8003734 <TIM_Base_SetConfig+0x138>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a23      	ldr	r2, [pc, #140]	; (8003738 <TIM_Base_SetConfig+0x13c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d108      	bne.n	80036c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <TIM_Base_SetConfig+0x114>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_Base_SetConfig+0xf8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <TIM_Base_SetConfig+0x124>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d103      	bne.n	80036fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	615a      	str	r2, [r3, #20]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40010400 	.word	0x40010400
 8003724:	40014000 	.word	0x40014000
 8003728:	40014400 	.word	0x40014400
 800372c:	40014800 	.word	0x40014800
 8003730:	40001800 	.word	0x40001800
 8003734:	40001c00 	.word	0x40001c00
 8003738:	40002000 	.word	0x40002000

0800373c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f023 0201 	bic.w	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 030a 	bic.w	r3, r3, #10
 8003778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800379a:	b480      	push	{r7}
 800379c:	b087      	sub	sp, #28
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0210 	bic.w	r2, r3, #16
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	031b      	lsls	r3, r3, #12
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	f043 0307 	orr.w	r3, r3, #7
 800381c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800384a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	021a      	lsls	r2, r3, #8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	431a      	orrs	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003884:	2302      	movs	r3, #2
 8003886:	e06d      	b.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a30      	ldr	r2, [pc, #192]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d108      	bne.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a20      	ldr	r2, [pc, #128]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d022      	beq.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d01d      	beq.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1c      	ldr	r2, [pc, #112]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1a      	ldr	r2, [pc, #104]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a15      	ldr	r2, [pc, #84]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a15      	ldr	r2, [pc, #84]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d10c      	bne.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	4313      	orrs	r3, r2
 8003948:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40010000 	.word	0x40010000
 8003974:	40010400 	.word	0x40010400
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40014000 	.word	0x40014000
 8003988:	40001800 	.word	0x40001800

0800398c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e040      	b.n	8003a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fbc4 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2224      	movs	r2, #36	; 0x24
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fc06 	bl	8004218 <UART_SetConfig>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fe5e 	bl	80046e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fee5 	bl	8004824 <UART_CheckIdleState>
 8003a5a:	4603      	mov	r3, r0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d171      	bne.n	8003b60 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_UART_Transmit+0x24>
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e06a      	b.n	8003b62 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2221      	movs	r2, #33	; 0x21
 8003a98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a9a:	f7fd fdcf 	bl	800163c <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Transmit+0x68>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad4:	e02c      	b.n	8003b30 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 feec 	bl	80048be <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e038      	b.n	8003b62 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3302      	adds	r3, #2
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e007      	b.n	8003b1e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1cc      	bne.n	8003ad6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2200      	movs	r2, #0
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 feb9 	bl	80048be <UART_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e005      	b.n	8003b62 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e000      	b.n	8003b62 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b08a      	sub	sp, #40	; 0x28
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d132      	bne.n	8003be8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_Receive_IT+0x24>
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e02b      	b.n	8003bea <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d018      	beq.n	8003bd8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	69f9      	ldr	r1, [r7, #28]
 8003bca:	6a3a      	ldr	r2, [r7, #32]
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e6      	bne.n	8003ba6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 ff34 	bl	8004a4c <UART_Start_Receive_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	e000      	b.n	8003bea <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3728      	adds	r7, #40	; 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b0ba      	sub	sp, #232	; 0xe8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c22:	4013      	ands	r3, r2
 8003c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d115      	bne.n	8003c5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00f      	beq.n	8003c5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 82ac 	beq.w	80041aa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
      }
      return;
 8003c5a:	e2a6      	b.n	80041aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8117 	beq.w	8003e94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c76:	4b85      	ldr	r3, [pc, #532]	; (8003e8c <HAL_UART_IRQHandler+0x298>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 810a 	beq.w	8003e94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d011      	beq.n	8003cb0 <HAL_UART_IRQHandler+0xbc>
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d011      	beq.n	8003ce0 <HAL_UART_IRQHandler+0xec>
 8003cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd6:	f043 0204 	orr.w	r2, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d011      	beq.n	8003d10 <HAL_UART_IRQHandler+0x11c>
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	f043 0202 	orr.w	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d017      	beq.n	8003d4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d42:	f043 0208 	orr.w	r2, r3, #8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d012      	beq.n	8003d7e <HAL_UART_IRQHandler+0x18a>
 8003d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8212 	beq.w	80041ae <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d005      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d04f      	beq.n	8003e76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fefe 	bl	8004bd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d141      	bne.n	8003e6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3308      	adds	r3, #8
 8003df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1d9      	bne.n	8003dea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d013      	beq.n	8003e66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <HAL_UART_IRQHandler+0x29c>)
 8003e44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd fda7 	bl	800199e <HAL_DMA_Abort_IT>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d017      	beq.n	8003e86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e60:	4610      	mov	r0, r2
 8003e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	e00f      	b.n	8003e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9b6 	bl	80041d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	e00b      	b.n	8003e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9b2 	bl	80041d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	e007      	b.n	8003e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9ae 	bl	80041d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e84:	e193      	b.n	80041ae <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	bf00      	nop
    return;
 8003e88:	e191      	b.n	80041ae <HAL_UART_IRQHandler+0x5ba>
 8003e8a:	bf00      	nop
 8003e8c:	04000120 	.word	0x04000120
 8003e90:	08004ca1 	.word	0x08004ca1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 814c 	bne.w	8004136 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8145 	beq.w	8004136 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 813e 	beq.w	8004136 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	f040 80b6 	bne.w	800403e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ede:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8165 	beq.w	80041b2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	f080 815d 	bcs.w	80041b2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003efe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0c:	f000 8086 	beq.w	800401c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1da      	bne.n	8003f10 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e1      	bne.n	8003f5a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e3      	bne.n	8003f96 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fec:	f023 0310 	bic.w	r3, r3, #16
 8003ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004000:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800400c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e4      	bne.n	8003fdc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd fc51 	bl	80018be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800402e:	b29b      	uxth	r3, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f8d8 	bl	80041ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800403c:	e0b9      	b.n	80041b2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404a:	b29b      	uxth	r3, r3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80ab 	beq.w	80041b6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80a6 	beq.w	80041b6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800407e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800408c:	647b      	str	r3, [r7, #68]	; 0x44
 800408e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800409a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e4      	bne.n	800406a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	623b      	str	r3, [r7, #32]
   return(result);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3308      	adds	r3, #8
 80040c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040c4:	633a      	str	r2, [r7, #48]	; 0x30
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e3      	bne.n	80040a0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f023 0310 	bic.w	r3, r3, #16
 8004100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	617b      	str	r3, [r7, #20]
   return(result);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e4      	bne.n	80040ec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f85c 	bl	80041ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004134:	e03f      	b.n	80041b6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00e      	beq.n	8004160 <HAL_UART_IRQHandler+0x56c>
 8004142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f853 	bl	8004204 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800415e:	e02d      	b.n	80041bc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00e      	beq.n	800418a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800416c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01c      	beq.n	80041ba <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
    }
    return;
 8004188:	e017      	b.n	80041ba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d012      	beq.n	80041bc <HAL_UART_IRQHandler+0x5c8>
 8004196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fd92 	bl	8004ccc <UART_EndTransmit_IT>
    return;
 80041a8:	e008      	b.n	80041bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80041aa:	bf00      	nop
 80041ac:	e006      	b.n	80041bc <HAL_UART_IRQHandler+0x5c8>
    return;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_UART_IRQHandler+0x5c8>
    return;
 80041ba:	bf00      	nop
  }

}
 80041bc:	37e8      	adds	r7, #232	; 0xe8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop

080041c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4ba6      	ldr	r3, [pc, #664]	; (80044dc <UART_SetConfig+0x2c4>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	430b      	orrs	r3, r1
 800424e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a94      	ldr	r2, [pc, #592]	; (80044e0 <UART_SetConfig+0x2c8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d120      	bne.n	80042d6 <UART_SetConfig+0xbe>
 8004294:	4b93      	ldr	r3, [pc, #588]	; (80044e4 <UART_SetConfig+0x2cc>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d816      	bhi.n	80042d0 <UART_SetConfig+0xb8>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0x90>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c5 	.word	0x080042c5
 80042b0:	080042bf 	.word	0x080042bf
 80042b4:	080042cb 	.word	0x080042cb
 80042b8:	2301      	movs	r3, #1
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e150      	b.n	8004560 <UART_SetConfig+0x348>
 80042be:	2302      	movs	r3, #2
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e14d      	b.n	8004560 <UART_SetConfig+0x348>
 80042c4:	2304      	movs	r3, #4
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e14a      	b.n	8004560 <UART_SetConfig+0x348>
 80042ca:	2308      	movs	r3, #8
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e147      	b.n	8004560 <UART_SetConfig+0x348>
 80042d0:	2310      	movs	r3, #16
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e144      	b.n	8004560 <UART_SetConfig+0x348>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a83      	ldr	r2, [pc, #524]	; (80044e8 <UART_SetConfig+0x2d0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d132      	bne.n	8004346 <UART_SetConfig+0x12e>
 80042e0:	4b80      	ldr	r3, [pc, #512]	; (80044e4 <UART_SetConfig+0x2cc>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d828      	bhi.n	8004340 <UART_SetConfig+0x128>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <UART_SetConfig+0xdc>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004329 	.word	0x08004329
 80042f8:	08004341 	.word	0x08004341
 80042fc:	08004341 	.word	0x08004341
 8004300:	08004341 	.word	0x08004341
 8004304:	08004335 	.word	0x08004335
 8004308:	08004341 	.word	0x08004341
 800430c:	08004341 	.word	0x08004341
 8004310:	08004341 	.word	0x08004341
 8004314:	0800432f 	.word	0x0800432f
 8004318:	08004341 	.word	0x08004341
 800431c:	08004341 	.word	0x08004341
 8004320:	08004341 	.word	0x08004341
 8004324:	0800433b 	.word	0x0800433b
 8004328:	2300      	movs	r3, #0
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e118      	b.n	8004560 <UART_SetConfig+0x348>
 800432e:	2302      	movs	r3, #2
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e115      	b.n	8004560 <UART_SetConfig+0x348>
 8004334:	2304      	movs	r3, #4
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e112      	b.n	8004560 <UART_SetConfig+0x348>
 800433a:	2308      	movs	r3, #8
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e10f      	b.n	8004560 <UART_SetConfig+0x348>
 8004340:	2310      	movs	r3, #16
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e10c      	b.n	8004560 <UART_SetConfig+0x348>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a68      	ldr	r2, [pc, #416]	; (80044ec <UART_SetConfig+0x2d4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d120      	bne.n	8004392 <UART_SetConfig+0x17a>
 8004350:	4b64      	ldr	r3, [pc, #400]	; (80044e4 <UART_SetConfig+0x2cc>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800435a:	2b30      	cmp	r3, #48	; 0x30
 800435c:	d013      	beq.n	8004386 <UART_SetConfig+0x16e>
 800435e:	2b30      	cmp	r3, #48	; 0x30
 8004360:	d814      	bhi.n	800438c <UART_SetConfig+0x174>
 8004362:	2b20      	cmp	r3, #32
 8004364:	d009      	beq.n	800437a <UART_SetConfig+0x162>
 8004366:	2b20      	cmp	r3, #32
 8004368:	d810      	bhi.n	800438c <UART_SetConfig+0x174>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <UART_SetConfig+0x15c>
 800436e:	2b10      	cmp	r3, #16
 8004370:	d006      	beq.n	8004380 <UART_SetConfig+0x168>
 8004372:	e00b      	b.n	800438c <UART_SetConfig+0x174>
 8004374:	2300      	movs	r3, #0
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e0f2      	b.n	8004560 <UART_SetConfig+0x348>
 800437a:	2302      	movs	r3, #2
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e0ef      	b.n	8004560 <UART_SetConfig+0x348>
 8004380:	2304      	movs	r3, #4
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e0ec      	b.n	8004560 <UART_SetConfig+0x348>
 8004386:	2308      	movs	r3, #8
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	e0e9      	b.n	8004560 <UART_SetConfig+0x348>
 800438c:	2310      	movs	r3, #16
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e0e6      	b.n	8004560 <UART_SetConfig+0x348>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a56      	ldr	r2, [pc, #344]	; (80044f0 <UART_SetConfig+0x2d8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d120      	bne.n	80043de <UART_SetConfig+0x1c6>
 800439c:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <UART_SetConfig+0x2cc>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043a6:	2bc0      	cmp	r3, #192	; 0xc0
 80043a8:	d013      	beq.n	80043d2 <UART_SetConfig+0x1ba>
 80043aa:	2bc0      	cmp	r3, #192	; 0xc0
 80043ac:	d814      	bhi.n	80043d8 <UART_SetConfig+0x1c0>
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d009      	beq.n	80043c6 <UART_SetConfig+0x1ae>
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d810      	bhi.n	80043d8 <UART_SetConfig+0x1c0>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <UART_SetConfig+0x1a8>
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d006      	beq.n	80043cc <UART_SetConfig+0x1b4>
 80043be:	e00b      	b.n	80043d8 <UART_SetConfig+0x1c0>
 80043c0:	2300      	movs	r3, #0
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e0cc      	b.n	8004560 <UART_SetConfig+0x348>
 80043c6:	2302      	movs	r3, #2
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e0c9      	b.n	8004560 <UART_SetConfig+0x348>
 80043cc:	2304      	movs	r3, #4
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e0c6      	b.n	8004560 <UART_SetConfig+0x348>
 80043d2:	2308      	movs	r3, #8
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e0c3      	b.n	8004560 <UART_SetConfig+0x348>
 80043d8:	2310      	movs	r3, #16
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e0c0      	b.n	8004560 <UART_SetConfig+0x348>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a44      	ldr	r2, [pc, #272]	; (80044f4 <UART_SetConfig+0x2dc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d125      	bne.n	8004434 <UART_SetConfig+0x21c>
 80043e8:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <UART_SetConfig+0x2cc>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f6:	d017      	beq.n	8004428 <UART_SetConfig+0x210>
 80043f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043fc:	d817      	bhi.n	800442e <UART_SetConfig+0x216>
 80043fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004402:	d00b      	beq.n	800441c <UART_SetConfig+0x204>
 8004404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004408:	d811      	bhi.n	800442e <UART_SetConfig+0x216>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <UART_SetConfig+0x1fe>
 800440e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004412:	d006      	beq.n	8004422 <UART_SetConfig+0x20a>
 8004414:	e00b      	b.n	800442e <UART_SetConfig+0x216>
 8004416:	2300      	movs	r3, #0
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e0a1      	b.n	8004560 <UART_SetConfig+0x348>
 800441c:	2302      	movs	r3, #2
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e09e      	b.n	8004560 <UART_SetConfig+0x348>
 8004422:	2304      	movs	r3, #4
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e09b      	b.n	8004560 <UART_SetConfig+0x348>
 8004428:	2308      	movs	r3, #8
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e098      	b.n	8004560 <UART_SetConfig+0x348>
 800442e:	2310      	movs	r3, #16
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e095      	b.n	8004560 <UART_SetConfig+0x348>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <UART_SetConfig+0x2e0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d125      	bne.n	800448a <UART_SetConfig+0x272>
 800443e:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <UART_SetConfig+0x2cc>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800444c:	d017      	beq.n	800447e <UART_SetConfig+0x266>
 800444e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004452:	d817      	bhi.n	8004484 <UART_SetConfig+0x26c>
 8004454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004458:	d00b      	beq.n	8004472 <UART_SetConfig+0x25a>
 800445a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445e:	d811      	bhi.n	8004484 <UART_SetConfig+0x26c>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <UART_SetConfig+0x254>
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d006      	beq.n	8004478 <UART_SetConfig+0x260>
 800446a:	e00b      	b.n	8004484 <UART_SetConfig+0x26c>
 800446c:	2301      	movs	r3, #1
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e076      	b.n	8004560 <UART_SetConfig+0x348>
 8004472:	2302      	movs	r3, #2
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e073      	b.n	8004560 <UART_SetConfig+0x348>
 8004478:	2304      	movs	r3, #4
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e070      	b.n	8004560 <UART_SetConfig+0x348>
 800447e:	2308      	movs	r3, #8
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e06d      	b.n	8004560 <UART_SetConfig+0x348>
 8004484:	2310      	movs	r3, #16
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e06a      	b.n	8004560 <UART_SetConfig+0x348>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1b      	ldr	r2, [pc, #108]	; (80044fc <UART_SetConfig+0x2e4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d138      	bne.n	8004506 <UART_SetConfig+0x2ee>
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <UART_SetConfig+0x2cc>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800449e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044a2:	d017      	beq.n	80044d4 <UART_SetConfig+0x2bc>
 80044a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044a8:	d82a      	bhi.n	8004500 <UART_SetConfig+0x2e8>
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ae:	d00b      	beq.n	80044c8 <UART_SetConfig+0x2b0>
 80044b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b4:	d824      	bhi.n	8004500 <UART_SetConfig+0x2e8>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <UART_SetConfig+0x2aa>
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	d006      	beq.n	80044ce <UART_SetConfig+0x2b6>
 80044c0:	e01e      	b.n	8004500 <UART_SetConfig+0x2e8>
 80044c2:	2300      	movs	r3, #0
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e04b      	b.n	8004560 <UART_SetConfig+0x348>
 80044c8:	2302      	movs	r3, #2
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e048      	b.n	8004560 <UART_SetConfig+0x348>
 80044ce:	2304      	movs	r3, #4
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	e045      	b.n	8004560 <UART_SetConfig+0x348>
 80044d4:	2308      	movs	r3, #8
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e042      	b.n	8004560 <UART_SetConfig+0x348>
 80044da:	bf00      	nop
 80044dc:	efff69f3 	.word	0xefff69f3
 80044e0:	40011000 	.word	0x40011000
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40004400 	.word	0x40004400
 80044ec:	40004800 	.word	0x40004800
 80044f0:	40004c00 	.word	0x40004c00
 80044f4:	40005000 	.word	0x40005000
 80044f8:	40011400 	.word	0x40011400
 80044fc:	40007800 	.word	0x40007800
 8004500:	2310      	movs	r3, #16
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e02c      	b.n	8004560 <UART_SetConfig+0x348>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a72      	ldr	r2, [pc, #456]	; (80046d4 <UART_SetConfig+0x4bc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d125      	bne.n	800455c <UART_SetConfig+0x344>
 8004510:	4b71      	ldr	r3, [pc, #452]	; (80046d8 <UART_SetConfig+0x4c0>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800451a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800451e:	d017      	beq.n	8004550 <UART_SetConfig+0x338>
 8004520:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004524:	d817      	bhi.n	8004556 <UART_SetConfig+0x33e>
 8004526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452a:	d00b      	beq.n	8004544 <UART_SetConfig+0x32c>
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004530:	d811      	bhi.n	8004556 <UART_SetConfig+0x33e>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <UART_SetConfig+0x326>
 8004536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800453a:	d006      	beq.n	800454a <UART_SetConfig+0x332>
 800453c:	e00b      	b.n	8004556 <UART_SetConfig+0x33e>
 800453e:	2300      	movs	r3, #0
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e00d      	b.n	8004560 <UART_SetConfig+0x348>
 8004544:	2302      	movs	r3, #2
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e00a      	b.n	8004560 <UART_SetConfig+0x348>
 800454a:	2304      	movs	r3, #4
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e007      	b.n	8004560 <UART_SetConfig+0x348>
 8004550:	2308      	movs	r3, #8
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e004      	b.n	8004560 <UART_SetConfig+0x348>
 8004556:	2310      	movs	r3, #16
 8004558:	77fb      	strb	r3, [r7, #31]
 800455a:	e001      	b.n	8004560 <UART_SetConfig+0x348>
 800455c:	2310      	movs	r3, #16
 800455e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004568:	d15b      	bne.n	8004622 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800456a:	7ffb      	ldrb	r3, [r7, #31]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d828      	bhi.n	80045c2 <UART_SetConfig+0x3aa>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0x360>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045ad 	.word	0x080045ad
 8004584:	080045c3 	.word	0x080045c3
 8004588:	080045b3 	.word	0x080045b3
 800458c:	080045c3 	.word	0x080045c3
 8004590:	080045c3 	.word	0x080045c3
 8004594:	080045c3 	.word	0x080045c3
 8004598:	080045bb 	.word	0x080045bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7fe f8ce 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 80045a0:	61b8      	str	r0, [r7, #24]
        break;
 80045a2:	e013      	b.n	80045cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7fe f8de 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 80045a8:	61b8      	str	r0, [r7, #24]
        break;
 80045aa:	e00f      	b.n	80045cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ac:	4b4b      	ldr	r3, [pc, #300]	; (80046dc <UART_SetConfig+0x4c4>)
 80045ae:	61bb      	str	r3, [r7, #24]
        break;
 80045b0:	e00c      	b.n	80045cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b2:	f7fd fff1 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 80045b6:	61b8      	str	r0, [r7, #24]
        break;
 80045b8:	e008      	b.n	80045cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045be:	61bb      	str	r3, [r7, #24]
        break;
 80045c0:	e004      	b.n	80045cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	77bb      	strb	r3, [r7, #30]
        break;
 80045ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d074      	beq.n	80046bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	005a      	lsls	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	441a      	add	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d916      	bls.n	800461c <UART_SetConfig+0x404>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d212      	bcs.n	800461c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f023 030f 	bic.w	r3, r3, #15
 80045fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	b29a      	uxth	r2, r3
 800460c:	89fb      	ldrh	r3, [r7, #14]
 800460e:	4313      	orrs	r3, r2
 8004610:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	89fa      	ldrh	r2, [r7, #14]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	e04f      	b.n	80046bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	77bb      	strb	r3, [r7, #30]
 8004620:	e04c      	b.n	80046bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004622:	7ffb      	ldrb	r3, [r7, #31]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d828      	bhi.n	800467a <UART_SetConfig+0x462>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0x418>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004655 	.word	0x08004655
 8004634:	0800465d 	.word	0x0800465d
 8004638:	08004665 	.word	0x08004665
 800463c:	0800467b 	.word	0x0800467b
 8004640:	0800466b 	.word	0x0800466b
 8004644:	0800467b 	.word	0x0800467b
 8004648:	0800467b 	.word	0x0800467b
 800464c:	0800467b 	.word	0x0800467b
 8004650:	08004673 	.word	0x08004673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004654:	f7fe f872 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8004658:	61b8      	str	r0, [r7, #24]
        break;
 800465a:	e013      	b.n	8004684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800465c:	f7fe f882 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8004660:	61b8      	str	r0, [r7, #24]
        break;
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <UART_SetConfig+0x4c4>)
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e00c      	b.n	8004684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466a:	f7fd ff95 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 800466e:	61b8      	str	r0, [r7, #24]
        break;
 8004670:	e008      	b.n	8004684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004676:	61bb      	str	r3, [r7, #24]
        break;
 8004678:	e004      	b.n	8004684 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	77bb      	strb	r3, [r7, #30]
        break;
 8004682:	bf00      	nop
    }

    if (pclk != 0U)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d018      	beq.n	80046bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	085a      	lsrs	r2, r3, #1
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	441a      	add	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b0f      	cmp	r3, #15
 80046a2:	d909      	bls.n	80046b8 <UART_SetConfig+0x4a0>
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046aa:	d205      	bcs.n	80046b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60da      	str	r2, [r3, #12]
 80046b6:	e001      	b.n	80046bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40007c00 	.word	0x40007c00
 80046d8:	40023800 	.word	0x40023800
 80046dc:	00f42400 	.word	0x00f42400

080046e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01a      	beq.n	80047f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047de:	d10a      	bne.n	80047f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
  }
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af02      	add	r7, sp, #8
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004834:	f7fc ff02 	bl	800163c <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b08      	cmp	r3, #8
 8004846:	d10e      	bne.n	8004866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f831 	bl	80048be <UART_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e027      	b.n	80048b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b04      	cmp	r3, #4
 8004872:	d10e      	bne.n	8004892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f81b 	bl	80048be <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e011      	b.n	80048b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b09c      	sub	sp, #112	; 0x70
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	4613      	mov	r3, r2
 80048cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ce:	e0a7      	b.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	f000 80a3 	beq.w	8004a20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fc feaf 	bl	800163c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d13f      	bne.n	8004970 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004900:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004904:	667b      	str	r3, [r7, #100]	; 0x64
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004910:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004914:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800491c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e6      	bne.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	663b      	str	r3, [r7, #96]	; 0x60
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004942:	64ba      	str	r2, [r7, #72]	; 0x48
 8004944:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e068      	b.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d050      	beq.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498c:	d148      	bne.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004996:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
 80049b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e6      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3308      	adds	r3, #8
 80049d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	613b      	str	r3, [r7, #16]
   return(result);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049ea:	623a      	str	r2, [r7, #32]
 80049ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	69f9      	ldr	r1, [r7, #28]
 80049f0:	6a3a      	ldr	r2, [r7, #32]
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e5      	bne.n	80049ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e010      	b.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	bf0c      	ite	eq
 8004a30:	2301      	moveq	r3, #1
 8004a32:	2300      	movne	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f43f af48 	beq.w	80048d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3770      	adds	r7, #112	; 0x70
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b097      	sub	sp, #92	; 0x5c
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7e:	d10e      	bne.n	8004a9e <UART_Start_Receive_IT+0x52>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <UART_Start_Receive_IT+0x48>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a92:	e02d      	b.n	8004af0 <UART_Start_Receive_IT+0xa4>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	22ff      	movs	r2, #255	; 0xff
 8004a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a9c:	e028      	b.n	8004af0 <UART_Start_Receive_IT+0xa4>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10d      	bne.n	8004ac2 <UART_Start_Receive_IT+0x76>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <UART_Start_Receive_IT+0x6c>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	22ff      	movs	r2, #255	; 0xff
 8004ab2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ab6:	e01b      	b.n	8004af0 <UART_Start_Receive_IT+0xa4>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	227f      	movs	r2, #127	; 0x7f
 8004abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ac0:	e016      	b.n	8004af0 <UART_Start_Receive_IT+0xa4>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aca:	d10d      	bne.n	8004ae8 <UART_Start_Receive_IT+0x9c>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d104      	bne.n	8004ade <UART_Start_Receive_IT+0x92>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	227f      	movs	r2, #127	; 0x7f
 8004ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004adc:	e008      	b.n	8004af0 <UART_Start_Receive_IT+0xa4>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	223f      	movs	r2, #63	; 0x3f
 8004ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ae6:	e003      	b.n	8004af0 <UART_Start_Receive_IT+0xa4>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2222      	movs	r2, #34	; 0x22
 8004afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	657b      	str	r3, [r7, #84]	; 0x54
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b20:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e5      	bne.n	8004b00 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3c:	d107      	bne.n	8004b4e <UART_Start_Receive_IT+0x102>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <UART_Start_Receive_IT+0x184>)
 8004b4a:	669a      	str	r2, [r3, #104]	; 0x68
 8004b4c:	e002      	b.n	8004b54 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <UART_Start_Receive_IT+0x188>)
 8004b52:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d019      	beq.n	8004b90 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e6      	bne.n	8004b5c <UART_Start_Receive_IT+0x110>
 8004b8e:	e018      	b.n	8004bc2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f043 0320 	orr.w	r3, r3, #32
 8004ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	69f9      	ldr	r1, [r7, #28]
 8004bb4:	6a3a      	ldr	r2, [r7, #32]
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e6      	bne.n	8004b90 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	375c      	adds	r7, #92	; 0x5c
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	08004e87 	.word	0x08004e87
 8004bd4:	08004d21 	.word	0x08004d21

08004bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b095      	sub	sp, #84	; 0x54
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8004c00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e6      	bne.n	8004be0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d118      	bne.n	8004c80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f023 0310 	bic.w	r3, r3, #16
 8004c62:	647b      	str	r3, [r7, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6979      	ldr	r1, [r7, #20]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e6      	bne.n	8004c4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c94:	bf00      	nop
 8004c96:	3754      	adds	r7, #84	; 0x54
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff fa8a 	bl	80041d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6979      	ldr	r1, [r7, #20]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e6      	bne.n	8004cd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff fa56 	bl	80041c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d18:	bf00      	nop
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b096      	sub	sp, #88	; 0x58
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d38:	2b22      	cmp	r3, #34	; 0x22
 8004d3a:	f040 8098 	bne.w	8004e6e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d48:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d4c:	b2d9      	uxtb	r1, r3
 8004d4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	400a      	ands	r2, r1
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d17b      	bne.n	8004e7e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da4:	647b      	str	r3, [r7, #68]	; 0x44
 8004da6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e6      	bne.n	8004d86 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dd8:	633a      	str	r2, [r7, #48]	; 0x30
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e5      	bne.n	8004db8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d12e      	bne.n	8004e66 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0310 	bic.w	r3, r3, #16
 8004e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	617b      	str	r3, [r7, #20]
   return(result);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e6      	bne.n	8004e0e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d103      	bne.n	8004e56 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2210      	movs	r2, #16
 8004e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff f9c4 	bl	80041ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e64:	e00b      	b.n	8004e7e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb fbea 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 8004e6c:	e007      	b.n	8004e7e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0208 	orr.w	r2, r2, #8
 8004e7c:	619a      	str	r2, [r3, #24]
}
 8004e7e:	bf00      	nop
 8004e80:	3758      	adds	r7, #88	; 0x58
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b096      	sub	sp, #88	; 0x58
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e9e:	2b22      	cmp	r3, #34	; 0x22
 8004ea0:	f040 8098 	bne.w	8004fd4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004eb4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004eb8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	1c9a      	adds	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d17b      	bne.n	8004fe4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e6      	bne.n	8004eec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e5      	bne.n	8004f1e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d12e      	bne.n	8004fcc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	647b      	str	r3, [r7, #68]	; 0x44
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e6      	bne.n	8004f74 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d103      	bne.n	8004fbc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff f911 	bl	80041ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fca:	e00b      	b.n	8004fe4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7fb fb37 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 8004fd2:	e007      	b.n	8004fe4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0208 	orr.w	r2, r2, #8
 8004fe2:	619a      	str	r2, [r3, #24]
}
 8004fe4:	bf00      	nop
 8004fe6:	3758      	adds	r7, #88	; 0x58
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <__errno>:
 8004fec:	4b01      	ldr	r3, [pc, #4]	; (8004ff4 <__errno+0x8>)
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	200002ec 	.word	0x200002ec

08004ff8 <__libc_init_array>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	4d0d      	ldr	r5, [pc, #52]	; (8005030 <__libc_init_array+0x38>)
 8004ffc:	4c0d      	ldr	r4, [pc, #52]	; (8005034 <__libc_init_array+0x3c>)
 8004ffe:	1b64      	subs	r4, r4, r5
 8005000:	10a4      	asrs	r4, r4, #2
 8005002:	2600      	movs	r6, #0
 8005004:	42a6      	cmp	r6, r4
 8005006:	d109      	bne.n	800501c <__libc_init_array+0x24>
 8005008:	4d0b      	ldr	r5, [pc, #44]	; (8005038 <__libc_init_array+0x40>)
 800500a:	4c0c      	ldr	r4, [pc, #48]	; (800503c <__libc_init_array+0x44>)
 800500c:	f000 ffbc 	bl	8005f88 <_init>
 8005010:	1b64      	subs	r4, r4, r5
 8005012:	10a4      	asrs	r4, r4, #2
 8005014:	2600      	movs	r6, #0
 8005016:	42a6      	cmp	r6, r4
 8005018:	d105      	bne.n	8005026 <__libc_init_array+0x2e>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005020:	4798      	blx	r3
 8005022:	3601      	adds	r6, #1
 8005024:	e7ee      	b.n	8005004 <__libc_init_array+0xc>
 8005026:	f855 3b04 	ldr.w	r3, [r5], #4
 800502a:	4798      	blx	r3
 800502c:	3601      	adds	r6, #1
 800502e:	e7f2      	b.n	8005016 <__libc_init_array+0x1e>
 8005030:	08006124 	.word	0x08006124
 8005034:	08006124 	.word	0x08006124
 8005038:	08006124 	.word	0x08006124
 800503c:	08006128 	.word	0x08006128

08005040 <memcpy>:
 8005040:	440a      	add	r2, r1
 8005042:	4291      	cmp	r1, r2
 8005044:	f100 33ff 	add.w	r3, r0, #4294967295
 8005048:	d100      	bne.n	800504c <memcpy+0xc>
 800504a:	4770      	bx	lr
 800504c:	b510      	push	{r4, lr}
 800504e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005056:	4291      	cmp	r1, r2
 8005058:	d1f9      	bne.n	800504e <memcpy+0xe>
 800505a:	bd10      	pop	{r4, pc}

0800505c <memset>:
 800505c:	4402      	add	r2, r0
 800505e:	4603      	mov	r3, r0
 8005060:	4293      	cmp	r3, r2
 8005062:	d100      	bne.n	8005066 <memset+0xa>
 8005064:	4770      	bx	lr
 8005066:	f803 1b01 	strb.w	r1, [r3], #1
 800506a:	e7f9      	b.n	8005060 <memset+0x4>

0800506c <iprintf>:
 800506c:	b40f      	push	{r0, r1, r2, r3}
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <iprintf+0x2c>)
 8005070:	b513      	push	{r0, r1, r4, lr}
 8005072:	681c      	ldr	r4, [r3, #0]
 8005074:	b124      	cbz	r4, 8005080 <iprintf+0x14>
 8005076:	69a3      	ldr	r3, [r4, #24]
 8005078:	b913      	cbnz	r3, 8005080 <iprintf+0x14>
 800507a:	4620      	mov	r0, r4
 800507c:	f000 f866 	bl	800514c <__sinit>
 8005080:	ab05      	add	r3, sp, #20
 8005082:	9a04      	ldr	r2, [sp, #16]
 8005084:	68a1      	ldr	r1, [r4, #8]
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	4620      	mov	r0, r4
 800508a:	f000 f9bd 	bl	8005408 <_vfiprintf_r>
 800508e:	b002      	add	sp, #8
 8005090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005094:	b004      	add	sp, #16
 8005096:	4770      	bx	lr
 8005098:	200002ec 	.word	0x200002ec

0800509c <std>:
 800509c:	2300      	movs	r3, #0
 800509e:	b510      	push	{r4, lr}
 80050a0:	4604      	mov	r4, r0
 80050a2:	e9c0 3300 	strd	r3, r3, [r0]
 80050a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050aa:	6083      	str	r3, [r0, #8]
 80050ac:	8181      	strh	r1, [r0, #12]
 80050ae:	6643      	str	r3, [r0, #100]	; 0x64
 80050b0:	81c2      	strh	r2, [r0, #14]
 80050b2:	6183      	str	r3, [r0, #24]
 80050b4:	4619      	mov	r1, r3
 80050b6:	2208      	movs	r2, #8
 80050b8:	305c      	adds	r0, #92	; 0x5c
 80050ba:	f7ff ffcf 	bl	800505c <memset>
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <std+0x38>)
 80050c0:	6263      	str	r3, [r4, #36]	; 0x24
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <std+0x3c>)
 80050c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <std+0x40>)
 80050c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <std+0x44>)
 80050cc:	6224      	str	r4, [r4, #32]
 80050ce:	6323      	str	r3, [r4, #48]	; 0x30
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	bf00      	nop
 80050d4:	080059b1 	.word	0x080059b1
 80050d8:	080059d3 	.word	0x080059d3
 80050dc:	08005a0b 	.word	0x08005a0b
 80050e0:	08005a2f 	.word	0x08005a2f

080050e4 <_cleanup_r>:
 80050e4:	4901      	ldr	r1, [pc, #4]	; (80050ec <_cleanup_r+0x8>)
 80050e6:	f000 b8af 	b.w	8005248 <_fwalk_reent>
 80050ea:	bf00      	nop
 80050ec:	08005d09 	.word	0x08005d09

080050f0 <__sfmoreglue>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	2268      	movs	r2, #104	; 0x68
 80050f4:	1e4d      	subs	r5, r1, #1
 80050f6:	4355      	muls	r5, r2
 80050f8:	460e      	mov	r6, r1
 80050fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050fe:	f000 f8e5 	bl	80052cc <_malloc_r>
 8005102:	4604      	mov	r4, r0
 8005104:	b140      	cbz	r0, 8005118 <__sfmoreglue+0x28>
 8005106:	2100      	movs	r1, #0
 8005108:	e9c0 1600 	strd	r1, r6, [r0]
 800510c:	300c      	adds	r0, #12
 800510e:	60a0      	str	r0, [r4, #8]
 8005110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005114:	f7ff ffa2 	bl	800505c <memset>
 8005118:	4620      	mov	r0, r4
 800511a:	bd70      	pop	{r4, r5, r6, pc}

0800511c <__sfp_lock_acquire>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__sfp_lock_acquire+0x8>)
 800511e:	f000 b8b3 	b.w	8005288 <__retarget_lock_acquire_recursive>
 8005122:	bf00      	nop
 8005124:	20001785 	.word	0x20001785

08005128 <__sfp_lock_release>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__sfp_lock_release+0x8>)
 800512a:	f000 b8ae 	b.w	800528a <__retarget_lock_release_recursive>
 800512e:	bf00      	nop
 8005130:	20001785 	.word	0x20001785

08005134 <__sinit_lock_acquire>:
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <__sinit_lock_acquire+0x8>)
 8005136:	f000 b8a7 	b.w	8005288 <__retarget_lock_acquire_recursive>
 800513a:	bf00      	nop
 800513c:	20001786 	.word	0x20001786

08005140 <__sinit_lock_release>:
 8005140:	4801      	ldr	r0, [pc, #4]	; (8005148 <__sinit_lock_release+0x8>)
 8005142:	f000 b8a2 	b.w	800528a <__retarget_lock_release_recursive>
 8005146:	bf00      	nop
 8005148:	20001786 	.word	0x20001786

0800514c <__sinit>:
 800514c:	b510      	push	{r4, lr}
 800514e:	4604      	mov	r4, r0
 8005150:	f7ff fff0 	bl	8005134 <__sinit_lock_acquire>
 8005154:	69a3      	ldr	r3, [r4, #24]
 8005156:	b11b      	cbz	r3, 8005160 <__sinit+0x14>
 8005158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800515c:	f7ff bff0 	b.w	8005140 <__sinit_lock_release>
 8005160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005164:	6523      	str	r3, [r4, #80]	; 0x50
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <__sinit+0x68>)
 8005168:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <__sinit+0x6c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	62a2      	str	r2, [r4, #40]	; 0x28
 800516e:	42a3      	cmp	r3, r4
 8005170:	bf04      	itt	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	61a3      	streq	r3, [r4, #24]
 8005176:	4620      	mov	r0, r4
 8005178:	f000 f820 	bl	80051bc <__sfp>
 800517c:	6060      	str	r0, [r4, #4]
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f81c 	bl	80051bc <__sfp>
 8005184:	60a0      	str	r0, [r4, #8]
 8005186:	4620      	mov	r0, r4
 8005188:	f000 f818 	bl	80051bc <__sfp>
 800518c:	2200      	movs	r2, #0
 800518e:	60e0      	str	r0, [r4, #12]
 8005190:	2104      	movs	r1, #4
 8005192:	6860      	ldr	r0, [r4, #4]
 8005194:	f7ff ff82 	bl	800509c <std>
 8005198:	68a0      	ldr	r0, [r4, #8]
 800519a:	2201      	movs	r2, #1
 800519c:	2109      	movs	r1, #9
 800519e:	f7ff ff7d 	bl	800509c <std>
 80051a2:	68e0      	ldr	r0, [r4, #12]
 80051a4:	2202      	movs	r2, #2
 80051a6:	2112      	movs	r1, #18
 80051a8:	f7ff ff78 	bl	800509c <std>
 80051ac:	2301      	movs	r3, #1
 80051ae:	61a3      	str	r3, [r4, #24]
 80051b0:	e7d2      	b.n	8005158 <__sinit+0xc>
 80051b2:	bf00      	nop
 80051b4:	08006084 	.word	0x08006084
 80051b8:	080050e5 	.word	0x080050e5

080051bc <__sfp>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	4607      	mov	r7, r0
 80051c0:	f7ff ffac 	bl	800511c <__sfp_lock_acquire>
 80051c4:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <__sfp+0x84>)
 80051c6:	681e      	ldr	r6, [r3, #0]
 80051c8:	69b3      	ldr	r3, [r6, #24]
 80051ca:	b913      	cbnz	r3, 80051d2 <__sfp+0x16>
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7ff ffbd 	bl	800514c <__sinit>
 80051d2:	3648      	adds	r6, #72	; 0x48
 80051d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051d8:	3b01      	subs	r3, #1
 80051da:	d503      	bpl.n	80051e4 <__sfp+0x28>
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	b30b      	cbz	r3, 8005224 <__sfp+0x68>
 80051e0:	6836      	ldr	r6, [r6, #0]
 80051e2:	e7f7      	b.n	80051d4 <__sfp+0x18>
 80051e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051e8:	b9d5      	cbnz	r5, 8005220 <__sfp+0x64>
 80051ea:	4b16      	ldr	r3, [pc, #88]	; (8005244 <__sfp+0x88>)
 80051ec:	60e3      	str	r3, [r4, #12]
 80051ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051f2:	6665      	str	r5, [r4, #100]	; 0x64
 80051f4:	f000 f847 	bl	8005286 <__retarget_lock_init_recursive>
 80051f8:	f7ff ff96 	bl	8005128 <__sfp_lock_release>
 80051fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005204:	6025      	str	r5, [r4, #0]
 8005206:	61a5      	str	r5, [r4, #24]
 8005208:	2208      	movs	r2, #8
 800520a:	4629      	mov	r1, r5
 800520c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005210:	f7ff ff24 	bl	800505c <memset>
 8005214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800521c:	4620      	mov	r0, r4
 800521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005220:	3468      	adds	r4, #104	; 0x68
 8005222:	e7d9      	b.n	80051d8 <__sfp+0x1c>
 8005224:	2104      	movs	r1, #4
 8005226:	4638      	mov	r0, r7
 8005228:	f7ff ff62 	bl	80050f0 <__sfmoreglue>
 800522c:	4604      	mov	r4, r0
 800522e:	6030      	str	r0, [r6, #0]
 8005230:	2800      	cmp	r0, #0
 8005232:	d1d5      	bne.n	80051e0 <__sfp+0x24>
 8005234:	f7ff ff78 	bl	8005128 <__sfp_lock_release>
 8005238:	230c      	movs	r3, #12
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	e7ee      	b.n	800521c <__sfp+0x60>
 800523e:	bf00      	nop
 8005240:	08006084 	.word	0x08006084
 8005244:	ffff0001 	.word	0xffff0001

08005248 <_fwalk_reent>:
 8005248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800524c:	4606      	mov	r6, r0
 800524e:	4688      	mov	r8, r1
 8005250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005254:	2700      	movs	r7, #0
 8005256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800525a:	f1b9 0901 	subs.w	r9, r9, #1
 800525e:	d505      	bpl.n	800526c <_fwalk_reent+0x24>
 8005260:	6824      	ldr	r4, [r4, #0]
 8005262:	2c00      	cmp	r4, #0
 8005264:	d1f7      	bne.n	8005256 <_fwalk_reent+0xe>
 8005266:	4638      	mov	r0, r7
 8005268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526c:	89ab      	ldrh	r3, [r5, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d907      	bls.n	8005282 <_fwalk_reent+0x3a>
 8005272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005276:	3301      	adds	r3, #1
 8005278:	d003      	beq.n	8005282 <_fwalk_reent+0x3a>
 800527a:	4629      	mov	r1, r5
 800527c:	4630      	mov	r0, r6
 800527e:	47c0      	blx	r8
 8005280:	4307      	orrs	r7, r0
 8005282:	3568      	adds	r5, #104	; 0x68
 8005284:	e7e9      	b.n	800525a <_fwalk_reent+0x12>

08005286 <__retarget_lock_init_recursive>:
 8005286:	4770      	bx	lr

08005288 <__retarget_lock_acquire_recursive>:
 8005288:	4770      	bx	lr

0800528a <__retarget_lock_release_recursive>:
 800528a:	4770      	bx	lr

0800528c <sbrk_aligned>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4e0e      	ldr	r6, [pc, #56]	; (80052c8 <sbrk_aligned+0x3c>)
 8005290:	460c      	mov	r4, r1
 8005292:	6831      	ldr	r1, [r6, #0]
 8005294:	4605      	mov	r5, r0
 8005296:	b911      	cbnz	r1, 800529e <sbrk_aligned+0x12>
 8005298:	f000 fb7a 	bl	8005990 <_sbrk_r>
 800529c:	6030      	str	r0, [r6, #0]
 800529e:	4621      	mov	r1, r4
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 fb75 	bl	8005990 <_sbrk_r>
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	d00a      	beq.n	80052c0 <sbrk_aligned+0x34>
 80052aa:	1cc4      	adds	r4, r0, #3
 80052ac:	f024 0403 	bic.w	r4, r4, #3
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	d007      	beq.n	80052c4 <sbrk_aligned+0x38>
 80052b4:	1a21      	subs	r1, r4, r0
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 fb6a 	bl	8005990 <_sbrk_r>
 80052bc:	3001      	adds	r0, #1
 80052be:	d101      	bne.n	80052c4 <sbrk_aligned+0x38>
 80052c0:	f04f 34ff 	mov.w	r4, #4294967295
 80052c4:	4620      	mov	r0, r4
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	2000178c 	.word	0x2000178c

080052cc <_malloc_r>:
 80052cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d0:	1ccd      	adds	r5, r1, #3
 80052d2:	f025 0503 	bic.w	r5, r5, #3
 80052d6:	3508      	adds	r5, #8
 80052d8:	2d0c      	cmp	r5, #12
 80052da:	bf38      	it	cc
 80052dc:	250c      	movcc	r5, #12
 80052de:	2d00      	cmp	r5, #0
 80052e0:	4607      	mov	r7, r0
 80052e2:	db01      	blt.n	80052e8 <_malloc_r+0x1c>
 80052e4:	42a9      	cmp	r1, r5
 80052e6:	d905      	bls.n	80052f4 <_malloc_r+0x28>
 80052e8:	230c      	movs	r3, #12
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	2600      	movs	r6, #0
 80052ee:	4630      	mov	r0, r6
 80052f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f4:	4e2e      	ldr	r6, [pc, #184]	; (80053b0 <_malloc_r+0xe4>)
 80052f6:	f000 fdbb 	bl	8005e70 <__malloc_lock>
 80052fa:	6833      	ldr	r3, [r6, #0]
 80052fc:	461c      	mov	r4, r3
 80052fe:	bb34      	cbnz	r4, 800534e <_malloc_r+0x82>
 8005300:	4629      	mov	r1, r5
 8005302:	4638      	mov	r0, r7
 8005304:	f7ff ffc2 	bl	800528c <sbrk_aligned>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	4604      	mov	r4, r0
 800530c:	d14d      	bne.n	80053aa <_malloc_r+0xde>
 800530e:	6834      	ldr	r4, [r6, #0]
 8005310:	4626      	mov	r6, r4
 8005312:	2e00      	cmp	r6, #0
 8005314:	d140      	bne.n	8005398 <_malloc_r+0xcc>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	4631      	mov	r1, r6
 800531a:	4638      	mov	r0, r7
 800531c:	eb04 0803 	add.w	r8, r4, r3
 8005320:	f000 fb36 	bl	8005990 <_sbrk_r>
 8005324:	4580      	cmp	r8, r0
 8005326:	d13a      	bne.n	800539e <_malloc_r+0xd2>
 8005328:	6821      	ldr	r1, [r4, #0]
 800532a:	3503      	adds	r5, #3
 800532c:	1a6d      	subs	r5, r5, r1
 800532e:	f025 0503 	bic.w	r5, r5, #3
 8005332:	3508      	adds	r5, #8
 8005334:	2d0c      	cmp	r5, #12
 8005336:	bf38      	it	cc
 8005338:	250c      	movcc	r5, #12
 800533a:	4629      	mov	r1, r5
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ffa5 	bl	800528c <sbrk_aligned>
 8005342:	3001      	adds	r0, #1
 8005344:	d02b      	beq.n	800539e <_malloc_r+0xd2>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	442b      	add	r3, r5
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	e00e      	b.n	800536c <_malloc_r+0xa0>
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	1b52      	subs	r2, r2, r5
 8005352:	d41e      	bmi.n	8005392 <_malloc_r+0xc6>
 8005354:	2a0b      	cmp	r2, #11
 8005356:	d916      	bls.n	8005386 <_malloc_r+0xba>
 8005358:	1961      	adds	r1, r4, r5
 800535a:	42a3      	cmp	r3, r4
 800535c:	6025      	str	r5, [r4, #0]
 800535e:	bf18      	it	ne
 8005360:	6059      	strne	r1, [r3, #4]
 8005362:	6863      	ldr	r3, [r4, #4]
 8005364:	bf08      	it	eq
 8005366:	6031      	streq	r1, [r6, #0]
 8005368:	5162      	str	r2, [r4, r5]
 800536a:	604b      	str	r3, [r1, #4]
 800536c:	4638      	mov	r0, r7
 800536e:	f104 060b 	add.w	r6, r4, #11
 8005372:	f000 fd83 	bl	8005e7c <__malloc_unlock>
 8005376:	f026 0607 	bic.w	r6, r6, #7
 800537a:	1d23      	adds	r3, r4, #4
 800537c:	1af2      	subs	r2, r6, r3
 800537e:	d0b6      	beq.n	80052ee <_malloc_r+0x22>
 8005380:	1b9b      	subs	r3, r3, r6
 8005382:	50a3      	str	r3, [r4, r2]
 8005384:	e7b3      	b.n	80052ee <_malloc_r+0x22>
 8005386:	6862      	ldr	r2, [r4, #4]
 8005388:	42a3      	cmp	r3, r4
 800538a:	bf0c      	ite	eq
 800538c:	6032      	streq	r2, [r6, #0]
 800538e:	605a      	strne	r2, [r3, #4]
 8005390:	e7ec      	b.n	800536c <_malloc_r+0xa0>
 8005392:	4623      	mov	r3, r4
 8005394:	6864      	ldr	r4, [r4, #4]
 8005396:	e7b2      	b.n	80052fe <_malloc_r+0x32>
 8005398:	4634      	mov	r4, r6
 800539a:	6876      	ldr	r6, [r6, #4]
 800539c:	e7b9      	b.n	8005312 <_malloc_r+0x46>
 800539e:	230c      	movs	r3, #12
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	4638      	mov	r0, r7
 80053a4:	f000 fd6a 	bl	8005e7c <__malloc_unlock>
 80053a8:	e7a1      	b.n	80052ee <_malloc_r+0x22>
 80053aa:	6025      	str	r5, [r4, #0]
 80053ac:	e7de      	b.n	800536c <_malloc_r+0xa0>
 80053ae:	bf00      	nop
 80053b0:	20001788 	.word	0x20001788

080053b4 <__sfputc_r>:
 80053b4:	6893      	ldr	r3, [r2, #8]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	b410      	push	{r4}
 80053bc:	6093      	str	r3, [r2, #8]
 80053be:	da08      	bge.n	80053d2 <__sfputc_r+0x1e>
 80053c0:	6994      	ldr	r4, [r2, #24]
 80053c2:	42a3      	cmp	r3, r4
 80053c4:	db01      	blt.n	80053ca <__sfputc_r+0x16>
 80053c6:	290a      	cmp	r1, #10
 80053c8:	d103      	bne.n	80053d2 <__sfputc_r+0x1e>
 80053ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ce:	f000 bb33 	b.w	8005a38 <__swbuf_r>
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	1c58      	adds	r0, r3, #1
 80053d6:	6010      	str	r0, [r2, #0]
 80053d8:	7019      	strb	r1, [r3, #0]
 80053da:	4608      	mov	r0, r1
 80053dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <__sfputs_r>:
 80053e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e4:	4606      	mov	r6, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	4614      	mov	r4, r2
 80053ea:	18d5      	adds	r5, r2, r3
 80053ec:	42ac      	cmp	r4, r5
 80053ee:	d101      	bne.n	80053f4 <__sfputs_r+0x12>
 80053f0:	2000      	movs	r0, #0
 80053f2:	e007      	b.n	8005404 <__sfputs_r+0x22>
 80053f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f8:	463a      	mov	r2, r7
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ffda 	bl	80053b4 <__sfputc_r>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d1f3      	bne.n	80053ec <__sfputs_r+0xa>
 8005404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005408 <_vfiprintf_r>:
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	460d      	mov	r5, r1
 800540e:	b09d      	sub	sp, #116	; 0x74
 8005410:	4614      	mov	r4, r2
 8005412:	4698      	mov	r8, r3
 8005414:	4606      	mov	r6, r0
 8005416:	b118      	cbz	r0, 8005420 <_vfiprintf_r+0x18>
 8005418:	6983      	ldr	r3, [r0, #24]
 800541a:	b90b      	cbnz	r3, 8005420 <_vfiprintf_r+0x18>
 800541c:	f7ff fe96 	bl	800514c <__sinit>
 8005420:	4b89      	ldr	r3, [pc, #548]	; (8005648 <_vfiprintf_r+0x240>)
 8005422:	429d      	cmp	r5, r3
 8005424:	d11b      	bne.n	800545e <_vfiprintf_r+0x56>
 8005426:	6875      	ldr	r5, [r6, #4]
 8005428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800542a:	07d9      	lsls	r1, r3, #31
 800542c:	d405      	bmi.n	800543a <_vfiprintf_r+0x32>
 800542e:	89ab      	ldrh	r3, [r5, #12]
 8005430:	059a      	lsls	r2, r3, #22
 8005432:	d402      	bmi.n	800543a <_vfiprintf_r+0x32>
 8005434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005436:	f7ff ff27 	bl	8005288 <__retarget_lock_acquire_recursive>
 800543a:	89ab      	ldrh	r3, [r5, #12]
 800543c:	071b      	lsls	r3, r3, #28
 800543e:	d501      	bpl.n	8005444 <_vfiprintf_r+0x3c>
 8005440:	692b      	ldr	r3, [r5, #16]
 8005442:	b9eb      	cbnz	r3, 8005480 <_vfiprintf_r+0x78>
 8005444:	4629      	mov	r1, r5
 8005446:	4630      	mov	r0, r6
 8005448:	f000 fb5a 	bl	8005b00 <__swsetup_r>
 800544c:	b1c0      	cbz	r0, 8005480 <_vfiprintf_r+0x78>
 800544e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005450:	07dc      	lsls	r4, r3, #31
 8005452:	d50e      	bpl.n	8005472 <_vfiprintf_r+0x6a>
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	b01d      	add	sp, #116	; 0x74
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545e:	4b7b      	ldr	r3, [pc, #492]	; (800564c <_vfiprintf_r+0x244>)
 8005460:	429d      	cmp	r5, r3
 8005462:	d101      	bne.n	8005468 <_vfiprintf_r+0x60>
 8005464:	68b5      	ldr	r5, [r6, #8]
 8005466:	e7df      	b.n	8005428 <_vfiprintf_r+0x20>
 8005468:	4b79      	ldr	r3, [pc, #484]	; (8005650 <_vfiprintf_r+0x248>)
 800546a:	429d      	cmp	r5, r3
 800546c:	bf08      	it	eq
 800546e:	68f5      	ldreq	r5, [r6, #12]
 8005470:	e7da      	b.n	8005428 <_vfiprintf_r+0x20>
 8005472:	89ab      	ldrh	r3, [r5, #12]
 8005474:	0598      	lsls	r0, r3, #22
 8005476:	d4ed      	bmi.n	8005454 <_vfiprintf_r+0x4c>
 8005478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547a:	f7ff ff06 	bl	800528a <__retarget_lock_release_recursive>
 800547e:	e7e9      	b.n	8005454 <_vfiprintf_r+0x4c>
 8005480:	2300      	movs	r3, #0
 8005482:	9309      	str	r3, [sp, #36]	; 0x24
 8005484:	2320      	movs	r3, #32
 8005486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800548a:	f8cd 800c 	str.w	r8, [sp, #12]
 800548e:	2330      	movs	r3, #48	; 0x30
 8005490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005654 <_vfiprintf_r+0x24c>
 8005494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005498:	f04f 0901 	mov.w	r9, #1
 800549c:	4623      	mov	r3, r4
 800549e:	469a      	mov	sl, r3
 80054a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a4:	b10a      	cbz	r2, 80054aa <_vfiprintf_r+0xa2>
 80054a6:	2a25      	cmp	r2, #37	; 0x25
 80054a8:	d1f9      	bne.n	800549e <_vfiprintf_r+0x96>
 80054aa:	ebba 0b04 	subs.w	fp, sl, r4
 80054ae:	d00b      	beq.n	80054c8 <_vfiprintf_r+0xc0>
 80054b0:	465b      	mov	r3, fp
 80054b2:	4622      	mov	r2, r4
 80054b4:	4629      	mov	r1, r5
 80054b6:	4630      	mov	r0, r6
 80054b8:	f7ff ff93 	bl	80053e2 <__sfputs_r>
 80054bc:	3001      	adds	r0, #1
 80054be:	f000 80aa 	beq.w	8005616 <_vfiprintf_r+0x20e>
 80054c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054c4:	445a      	add	r2, fp
 80054c6:	9209      	str	r2, [sp, #36]	; 0x24
 80054c8:	f89a 3000 	ldrb.w	r3, [sl]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a2 	beq.w	8005616 <_vfiprintf_r+0x20e>
 80054d2:	2300      	movs	r3, #0
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295
 80054d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054dc:	f10a 0a01 	add.w	sl, sl, #1
 80054e0:	9304      	str	r3, [sp, #16]
 80054e2:	9307      	str	r3, [sp, #28]
 80054e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054e8:	931a      	str	r3, [sp, #104]	; 0x68
 80054ea:	4654      	mov	r4, sl
 80054ec:	2205      	movs	r2, #5
 80054ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f2:	4858      	ldr	r0, [pc, #352]	; (8005654 <_vfiprintf_r+0x24c>)
 80054f4:	f7fa fea4 	bl	8000240 <memchr>
 80054f8:	9a04      	ldr	r2, [sp, #16]
 80054fa:	b9d8      	cbnz	r0, 8005534 <_vfiprintf_r+0x12c>
 80054fc:	06d1      	lsls	r1, r2, #27
 80054fe:	bf44      	itt	mi
 8005500:	2320      	movmi	r3, #32
 8005502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005506:	0713      	lsls	r3, r2, #28
 8005508:	bf44      	itt	mi
 800550a:	232b      	movmi	r3, #43	; 0x2b
 800550c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005510:	f89a 3000 	ldrb.w	r3, [sl]
 8005514:	2b2a      	cmp	r3, #42	; 0x2a
 8005516:	d015      	beq.n	8005544 <_vfiprintf_r+0x13c>
 8005518:	9a07      	ldr	r2, [sp, #28]
 800551a:	4654      	mov	r4, sl
 800551c:	2000      	movs	r0, #0
 800551e:	f04f 0c0a 	mov.w	ip, #10
 8005522:	4621      	mov	r1, r4
 8005524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005528:	3b30      	subs	r3, #48	; 0x30
 800552a:	2b09      	cmp	r3, #9
 800552c:	d94e      	bls.n	80055cc <_vfiprintf_r+0x1c4>
 800552e:	b1b0      	cbz	r0, 800555e <_vfiprintf_r+0x156>
 8005530:	9207      	str	r2, [sp, #28]
 8005532:	e014      	b.n	800555e <_vfiprintf_r+0x156>
 8005534:	eba0 0308 	sub.w	r3, r0, r8
 8005538:	fa09 f303 	lsl.w	r3, r9, r3
 800553c:	4313      	orrs	r3, r2
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	46a2      	mov	sl, r4
 8005542:	e7d2      	b.n	80054ea <_vfiprintf_r+0xe2>
 8005544:	9b03      	ldr	r3, [sp, #12]
 8005546:	1d19      	adds	r1, r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	9103      	str	r1, [sp, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	bfbb      	ittet	lt
 8005550:	425b      	neglt	r3, r3
 8005552:	f042 0202 	orrlt.w	r2, r2, #2
 8005556:	9307      	strge	r3, [sp, #28]
 8005558:	9307      	strlt	r3, [sp, #28]
 800555a:	bfb8      	it	lt
 800555c:	9204      	strlt	r2, [sp, #16]
 800555e:	7823      	ldrb	r3, [r4, #0]
 8005560:	2b2e      	cmp	r3, #46	; 0x2e
 8005562:	d10c      	bne.n	800557e <_vfiprintf_r+0x176>
 8005564:	7863      	ldrb	r3, [r4, #1]
 8005566:	2b2a      	cmp	r3, #42	; 0x2a
 8005568:	d135      	bne.n	80055d6 <_vfiprintf_r+0x1ce>
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	1d1a      	adds	r2, r3, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	9203      	str	r2, [sp, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	bfb8      	it	lt
 8005576:	f04f 33ff 	movlt.w	r3, #4294967295
 800557a:	3402      	adds	r4, #2
 800557c:	9305      	str	r3, [sp, #20]
 800557e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005664 <_vfiprintf_r+0x25c>
 8005582:	7821      	ldrb	r1, [r4, #0]
 8005584:	2203      	movs	r2, #3
 8005586:	4650      	mov	r0, sl
 8005588:	f7fa fe5a 	bl	8000240 <memchr>
 800558c:	b140      	cbz	r0, 80055a0 <_vfiprintf_r+0x198>
 800558e:	2340      	movs	r3, #64	; 0x40
 8005590:	eba0 000a 	sub.w	r0, r0, sl
 8005594:	fa03 f000 	lsl.w	r0, r3, r0
 8005598:	9b04      	ldr	r3, [sp, #16]
 800559a:	4303      	orrs	r3, r0
 800559c:	3401      	adds	r4, #1
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a4:	482c      	ldr	r0, [pc, #176]	; (8005658 <_vfiprintf_r+0x250>)
 80055a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055aa:	2206      	movs	r2, #6
 80055ac:	f7fa fe48 	bl	8000240 <memchr>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d03f      	beq.n	8005634 <_vfiprintf_r+0x22c>
 80055b4:	4b29      	ldr	r3, [pc, #164]	; (800565c <_vfiprintf_r+0x254>)
 80055b6:	bb1b      	cbnz	r3, 8005600 <_vfiprintf_r+0x1f8>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	3307      	adds	r3, #7
 80055bc:	f023 0307 	bic.w	r3, r3, #7
 80055c0:	3308      	adds	r3, #8
 80055c2:	9303      	str	r3, [sp, #12]
 80055c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c6:	443b      	add	r3, r7
 80055c8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ca:	e767      	b.n	800549c <_vfiprintf_r+0x94>
 80055cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d0:	460c      	mov	r4, r1
 80055d2:	2001      	movs	r0, #1
 80055d4:	e7a5      	b.n	8005522 <_vfiprintf_r+0x11a>
 80055d6:	2300      	movs	r3, #0
 80055d8:	3401      	adds	r4, #1
 80055da:	9305      	str	r3, [sp, #20]
 80055dc:	4619      	mov	r1, r3
 80055de:	f04f 0c0a 	mov.w	ip, #10
 80055e2:	4620      	mov	r0, r4
 80055e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055e8:	3a30      	subs	r2, #48	; 0x30
 80055ea:	2a09      	cmp	r2, #9
 80055ec:	d903      	bls.n	80055f6 <_vfiprintf_r+0x1ee>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0c5      	beq.n	800557e <_vfiprintf_r+0x176>
 80055f2:	9105      	str	r1, [sp, #20]
 80055f4:	e7c3      	b.n	800557e <_vfiprintf_r+0x176>
 80055f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80055fa:	4604      	mov	r4, r0
 80055fc:	2301      	movs	r3, #1
 80055fe:	e7f0      	b.n	80055e2 <_vfiprintf_r+0x1da>
 8005600:	ab03      	add	r3, sp, #12
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	462a      	mov	r2, r5
 8005606:	4b16      	ldr	r3, [pc, #88]	; (8005660 <_vfiprintf_r+0x258>)
 8005608:	a904      	add	r1, sp, #16
 800560a:	4630      	mov	r0, r6
 800560c:	f3af 8000 	nop.w
 8005610:	4607      	mov	r7, r0
 8005612:	1c78      	adds	r0, r7, #1
 8005614:	d1d6      	bne.n	80055c4 <_vfiprintf_r+0x1bc>
 8005616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005618:	07d9      	lsls	r1, r3, #31
 800561a:	d405      	bmi.n	8005628 <_vfiprintf_r+0x220>
 800561c:	89ab      	ldrh	r3, [r5, #12]
 800561e:	059a      	lsls	r2, r3, #22
 8005620:	d402      	bmi.n	8005628 <_vfiprintf_r+0x220>
 8005622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005624:	f7ff fe31 	bl	800528a <__retarget_lock_release_recursive>
 8005628:	89ab      	ldrh	r3, [r5, #12]
 800562a:	065b      	lsls	r3, r3, #25
 800562c:	f53f af12 	bmi.w	8005454 <_vfiprintf_r+0x4c>
 8005630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005632:	e711      	b.n	8005458 <_vfiprintf_r+0x50>
 8005634:	ab03      	add	r3, sp, #12
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	462a      	mov	r2, r5
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <_vfiprintf_r+0x258>)
 800563c:	a904      	add	r1, sp, #16
 800563e:	4630      	mov	r0, r6
 8005640:	f000 f880 	bl	8005744 <_printf_i>
 8005644:	e7e4      	b.n	8005610 <_vfiprintf_r+0x208>
 8005646:	bf00      	nop
 8005648:	080060a8 	.word	0x080060a8
 800564c:	080060c8 	.word	0x080060c8
 8005650:	08006088 	.word	0x08006088
 8005654:	080060e8 	.word	0x080060e8
 8005658:	080060f2 	.word	0x080060f2
 800565c:	00000000 	.word	0x00000000
 8005660:	080053e3 	.word	0x080053e3
 8005664:	080060ee 	.word	0x080060ee

08005668 <_printf_common>:
 8005668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	4616      	mov	r6, r2
 800566e:	4699      	mov	r9, r3
 8005670:	688a      	ldr	r2, [r1, #8]
 8005672:	690b      	ldr	r3, [r1, #16]
 8005674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005678:	4293      	cmp	r3, r2
 800567a:	bfb8      	it	lt
 800567c:	4613      	movlt	r3, r2
 800567e:	6033      	str	r3, [r6, #0]
 8005680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005684:	4607      	mov	r7, r0
 8005686:	460c      	mov	r4, r1
 8005688:	b10a      	cbz	r2, 800568e <_printf_common+0x26>
 800568a:	3301      	adds	r3, #1
 800568c:	6033      	str	r3, [r6, #0]
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	0699      	lsls	r1, r3, #26
 8005692:	bf42      	ittt	mi
 8005694:	6833      	ldrmi	r3, [r6, #0]
 8005696:	3302      	addmi	r3, #2
 8005698:	6033      	strmi	r3, [r6, #0]
 800569a:	6825      	ldr	r5, [r4, #0]
 800569c:	f015 0506 	ands.w	r5, r5, #6
 80056a0:	d106      	bne.n	80056b0 <_printf_common+0x48>
 80056a2:	f104 0a19 	add.w	sl, r4, #25
 80056a6:	68e3      	ldr	r3, [r4, #12]
 80056a8:	6832      	ldr	r2, [r6, #0]
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	42ab      	cmp	r3, r5
 80056ae:	dc26      	bgt.n	80056fe <_printf_common+0x96>
 80056b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056b4:	1e13      	subs	r3, r2, #0
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	bf18      	it	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	0692      	lsls	r2, r2, #26
 80056be:	d42b      	bmi.n	8005718 <_printf_common+0xb0>
 80056c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c4:	4649      	mov	r1, r9
 80056c6:	4638      	mov	r0, r7
 80056c8:	47c0      	blx	r8
 80056ca:	3001      	adds	r0, #1
 80056cc:	d01e      	beq.n	800570c <_printf_common+0xa4>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	68e5      	ldr	r5, [r4, #12]
 80056d2:	6832      	ldr	r2, [r6, #0]
 80056d4:	f003 0306 	and.w	r3, r3, #6
 80056d8:	2b04      	cmp	r3, #4
 80056da:	bf08      	it	eq
 80056dc:	1aad      	subeq	r5, r5, r2
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	bf0c      	ite	eq
 80056e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e8:	2500      	movne	r5, #0
 80056ea:	4293      	cmp	r3, r2
 80056ec:	bfc4      	itt	gt
 80056ee:	1a9b      	subgt	r3, r3, r2
 80056f0:	18ed      	addgt	r5, r5, r3
 80056f2:	2600      	movs	r6, #0
 80056f4:	341a      	adds	r4, #26
 80056f6:	42b5      	cmp	r5, r6
 80056f8:	d11a      	bne.n	8005730 <_printf_common+0xc8>
 80056fa:	2000      	movs	r0, #0
 80056fc:	e008      	b.n	8005710 <_printf_common+0xa8>
 80056fe:	2301      	movs	r3, #1
 8005700:	4652      	mov	r2, sl
 8005702:	4649      	mov	r1, r9
 8005704:	4638      	mov	r0, r7
 8005706:	47c0      	blx	r8
 8005708:	3001      	adds	r0, #1
 800570a:	d103      	bne.n	8005714 <_printf_common+0xac>
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005714:	3501      	adds	r5, #1
 8005716:	e7c6      	b.n	80056a6 <_printf_common+0x3e>
 8005718:	18e1      	adds	r1, r4, r3
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	2030      	movs	r0, #48	; 0x30
 800571e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005722:	4422      	add	r2, r4
 8005724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800572c:	3302      	adds	r3, #2
 800572e:	e7c7      	b.n	80056c0 <_printf_common+0x58>
 8005730:	2301      	movs	r3, #1
 8005732:	4622      	mov	r2, r4
 8005734:	4649      	mov	r1, r9
 8005736:	4638      	mov	r0, r7
 8005738:	47c0      	blx	r8
 800573a:	3001      	adds	r0, #1
 800573c:	d0e6      	beq.n	800570c <_printf_common+0xa4>
 800573e:	3601      	adds	r6, #1
 8005740:	e7d9      	b.n	80056f6 <_printf_common+0x8e>
	...

08005744 <_printf_i>:
 8005744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	7e0f      	ldrb	r7, [r1, #24]
 800574a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800574c:	2f78      	cmp	r7, #120	; 0x78
 800574e:	4691      	mov	r9, r2
 8005750:	4680      	mov	r8, r0
 8005752:	460c      	mov	r4, r1
 8005754:	469a      	mov	sl, r3
 8005756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800575a:	d807      	bhi.n	800576c <_printf_i+0x28>
 800575c:	2f62      	cmp	r7, #98	; 0x62
 800575e:	d80a      	bhi.n	8005776 <_printf_i+0x32>
 8005760:	2f00      	cmp	r7, #0
 8005762:	f000 80d8 	beq.w	8005916 <_printf_i+0x1d2>
 8005766:	2f58      	cmp	r7, #88	; 0x58
 8005768:	f000 80a3 	beq.w	80058b2 <_printf_i+0x16e>
 800576c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005774:	e03a      	b.n	80057ec <_printf_i+0xa8>
 8005776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800577a:	2b15      	cmp	r3, #21
 800577c:	d8f6      	bhi.n	800576c <_printf_i+0x28>
 800577e:	a101      	add	r1, pc, #4	; (adr r1, 8005784 <_printf_i+0x40>)
 8005780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005784:	080057dd 	.word	0x080057dd
 8005788:	080057f1 	.word	0x080057f1
 800578c:	0800576d 	.word	0x0800576d
 8005790:	0800576d 	.word	0x0800576d
 8005794:	0800576d 	.word	0x0800576d
 8005798:	0800576d 	.word	0x0800576d
 800579c:	080057f1 	.word	0x080057f1
 80057a0:	0800576d 	.word	0x0800576d
 80057a4:	0800576d 	.word	0x0800576d
 80057a8:	0800576d 	.word	0x0800576d
 80057ac:	0800576d 	.word	0x0800576d
 80057b0:	080058fd 	.word	0x080058fd
 80057b4:	08005821 	.word	0x08005821
 80057b8:	080058df 	.word	0x080058df
 80057bc:	0800576d 	.word	0x0800576d
 80057c0:	0800576d 	.word	0x0800576d
 80057c4:	0800591f 	.word	0x0800591f
 80057c8:	0800576d 	.word	0x0800576d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800576d 	.word	0x0800576d
 80057d4:	0800576d 	.word	0x0800576d
 80057d8:	080058e7 	.word	0x080058e7
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	602a      	str	r2, [r5, #0]
 80057e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0a3      	b.n	8005938 <_printf_i+0x1f4>
 80057f0:	6820      	ldr	r0, [r4, #0]
 80057f2:	6829      	ldr	r1, [r5, #0]
 80057f4:	0606      	lsls	r6, r0, #24
 80057f6:	f101 0304 	add.w	r3, r1, #4
 80057fa:	d50a      	bpl.n	8005812 <_printf_i+0xce>
 80057fc:	680e      	ldr	r6, [r1, #0]
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	2e00      	cmp	r6, #0
 8005802:	da03      	bge.n	800580c <_printf_i+0xc8>
 8005804:	232d      	movs	r3, #45	; 0x2d
 8005806:	4276      	negs	r6, r6
 8005808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800580c:	485e      	ldr	r0, [pc, #376]	; (8005988 <_printf_i+0x244>)
 800580e:	230a      	movs	r3, #10
 8005810:	e019      	b.n	8005846 <_printf_i+0x102>
 8005812:	680e      	ldr	r6, [r1, #0]
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800581a:	bf18      	it	ne
 800581c:	b236      	sxthne	r6, r6
 800581e:	e7ef      	b.n	8005800 <_printf_i+0xbc>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	6820      	ldr	r0, [r4, #0]
 8005824:	1d19      	adds	r1, r3, #4
 8005826:	6029      	str	r1, [r5, #0]
 8005828:	0601      	lsls	r1, r0, #24
 800582a:	d501      	bpl.n	8005830 <_printf_i+0xec>
 800582c:	681e      	ldr	r6, [r3, #0]
 800582e:	e002      	b.n	8005836 <_printf_i+0xf2>
 8005830:	0646      	lsls	r6, r0, #25
 8005832:	d5fb      	bpl.n	800582c <_printf_i+0xe8>
 8005834:	881e      	ldrh	r6, [r3, #0]
 8005836:	4854      	ldr	r0, [pc, #336]	; (8005988 <_printf_i+0x244>)
 8005838:	2f6f      	cmp	r7, #111	; 0x6f
 800583a:	bf0c      	ite	eq
 800583c:	2308      	moveq	r3, #8
 800583e:	230a      	movne	r3, #10
 8005840:	2100      	movs	r1, #0
 8005842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005846:	6865      	ldr	r5, [r4, #4]
 8005848:	60a5      	str	r5, [r4, #8]
 800584a:	2d00      	cmp	r5, #0
 800584c:	bfa2      	ittt	ge
 800584e:	6821      	ldrge	r1, [r4, #0]
 8005850:	f021 0104 	bicge.w	r1, r1, #4
 8005854:	6021      	strge	r1, [r4, #0]
 8005856:	b90e      	cbnz	r6, 800585c <_printf_i+0x118>
 8005858:	2d00      	cmp	r5, #0
 800585a:	d04d      	beq.n	80058f8 <_printf_i+0x1b4>
 800585c:	4615      	mov	r5, r2
 800585e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005862:	fb03 6711 	mls	r7, r3, r1, r6
 8005866:	5dc7      	ldrb	r7, [r0, r7]
 8005868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800586c:	4637      	mov	r7, r6
 800586e:	42bb      	cmp	r3, r7
 8005870:	460e      	mov	r6, r1
 8005872:	d9f4      	bls.n	800585e <_printf_i+0x11a>
 8005874:	2b08      	cmp	r3, #8
 8005876:	d10b      	bne.n	8005890 <_printf_i+0x14c>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	07de      	lsls	r6, r3, #31
 800587c:	d508      	bpl.n	8005890 <_printf_i+0x14c>
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	6861      	ldr	r1, [r4, #4]
 8005882:	4299      	cmp	r1, r3
 8005884:	bfde      	ittt	le
 8005886:	2330      	movle	r3, #48	; 0x30
 8005888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800588c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005890:	1b52      	subs	r2, r2, r5
 8005892:	6122      	str	r2, [r4, #16]
 8005894:	f8cd a000 	str.w	sl, [sp]
 8005898:	464b      	mov	r3, r9
 800589a:	aa03      	add	r2, sp, #12
 800589c:	4621      	mov	r1, r4
 800589e:	4640      	mov	r0, r8
 80058a0:	f7ff fee2 	bl	8005668 <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d14c      	bne.n	8005942 <_printf_i+0x1fe>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	b004      	add	sp, #16
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	4835      	ldr	r0, [pc, #212]	; (8005988 <_printf_i+0x244>)
 80058b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058b8:	6829      	ldr	r1, [r5, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80058c0:	6029      	str	r1, [r5, #0]
 80058c2:	061d      	lsls	r5, r3, #24
 80058c4:	d514      	bpl.n	80058f0 <_printf_i+0x1ac>
 80058c6:	07df      	lsls	r7, r3, #31
 80058c8:	bf44      	itt	mi
 80058ca:	f043 0320 	orrmi.w	r3, r3, #32
 80058ce:	6023      	strmi	r3, [r4, #0]
 80058d0:	b91e      	cbnz	r6, 80058da <_printf_i+0x196>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	f023 0320 	bic.w	r3, r3, #32
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	2310      	movs	r3, #16
 80058dc:	e7b0      	b.n	8005840 <_printf_i+0xfc>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f043 0320 	orr.w	r3, r3, #32
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	2378      	movs	r3, #120	; 0x78
 80058e8:	4828      	ldr	r0, [pc, #160]	; (800598c <_printf_i+0x248>)
 80058ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ee:	e7e3      	b.n	80058b8 <_printf_i+0x174>
 80058f0:	0659      	lsls	r1, r3, #25
 80058f2:	bf48      	it	mi
 80058f4:	b2b6      	uxthmi	r6, r6
 80058f6:	e7e6      	b.n	80058c6 <_printf_i+0x182>
 80058f8:	4615      	mov	r5, r2
 80058fa:	e7bb      	b.n	8005874 <_printf_i+0x130>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	6826      	ldr	r6, [r4, #0]
 8005900:	6961      	ldr	r1, [r4, #20]
 8005902:	1d18      	adds	r0, r3, #4
 8005904:	6028      	str	r0, [r5, #0]
 8005906:	0635      	lsls	r5, r6, #24
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	d501      	bpl.n	8005910 <_printf_i+0x1cc>
 800590c:	6019      	str	r1, [r3, #0]
 800590e:	e002      	b.n	8005916 <_printf_i+0x1d2>
 8005910:	0670      	lsls	r0, r6, #25
 8005912:	d5fb      	bpl.n	800590c <_printf_i+0x1c8>
 8005914:	8019      	strh	r1, [r3, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	4615      	mov	r5, r2
 800591c:	e7ba      	b.n	8005894 <_printf_i+0x150>
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	1d1a      	adds	r2, r3, #4
 8005922:	602a      	str	r2, [r5, #0]
 8005924:	681d      	ldr	r5, [r3, #0]
 8005926:	6862      	ldr	r2, [r4, #4]
 8005928:	2100      	movs	r1, #0
 800592a:	4628      	mov	r0, r5
 800592c:	f7fa fc88 	bl	8000240 <memchr>
 8005930:	b108      	cbz	r0, 8005936 <_printf_i+0x1f2>
 8005932:	1b40      	subs	r0, r0, r5
 8005934:	6060      	str	r0, [r4, #4]
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	2300      	movs	r3, #0
 800593c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005940:	e7a8      	b.n	8005894 <_printf_i+0x150>
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	462a      	mov	r2, r5
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	47d0      	blx	sl
 800594c:	3001      	adds	r0, #1
 800594e:	d0ab      	beq.n	80058a8 <_printf_i+0x164>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	079b      	lsls	r3, r3, #30
 8005954:	d413      	bmi.n	800597e <_printf_i+0x23a>
 8005956:	68e0      	ldr	r0, [r4, #12]
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	4298      	cmp	r0, r3
 800595c:	bfb8      	it	lt
 800595e:	4618      	movlt	r0, r3
 8005960:	e7a4      	b.n	80058ac <_printf_i+0x168>
 8005962:	2301      	movs	r3, #1
 8005964:	4632      	mov	r2, r6
 8005966:	4649      	mov	r1, r9
 8005968:	4640      	mov	r0, r8
 800596a:	47d0      	blx	sl
 800596c:	3001      	adds	r0, #1
 800596e:	d09b      	beq.n	80058a8 <_printf_i+0x164>
 8005970:	3501      	adds	r5, #1
 8005972:	68e3      	ldr	r3, [r4, #12]
 8005974:	9903      	ldr	r1, [sp, #12]
 8005976:	1a5b      	subs	r3, r3, r1
 8005978:	42ab      	cmp	r3, r5
 800597a:	dcf2      	bgt.n	8005962 <_printf_i+0x21e>
 800597c:	e7eb      	b.n	8005956 <_printf_i+0x212>
 800597e:	2500      	movs	r5, #0
 8005980:	f104 0619 	add.w	r6, r4, #25
 8005984:	e7f5      	b.n	8005972 <_printf_i+0x22e>
 8005986:	bf00      	nop
 8005988:	080060f9 	.word	0x080060f9
 800598c:	0800610a 	.word	0x0800610a

08005990 <_sbrk_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d06      	ldr	r5, [pc, #24]	; (80059ac <_sbrk_r+0x1c>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f7fb fd8c 	bl	80014b8 <_sbrk>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_sbrk_r+0x1a>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_sbrk_r+0x1a>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20001790 	.word	0x20001790

080059b0 <__sread>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	460c      	mov	r4, r1
 80059b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b8:	f000 fab2 	bl	8005f20 <_read_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	bfab      	itete	ge
 80059c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059c2:	89a3      	ldrhlt	r3, [r4, #12]
 80059c4:	181b      	addge	r3, r3, r0
 80059c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ca:	bfac      	ite	ge
 80059cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ce:	81a3      	strhlt	r3, [r4, #12]
 80059d0:	bd10      	pop	{r4, pc}

080059d2 <__swrite>:
 80059d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d6:	461f      	mov	r7, r3
 80059d8:	898b      	ldrh	r3, [r1, #12]
 80059da:	05db      	lsls	r3, r3, #23
 80059dc:	4605      	mov	r5, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	4616      	mov	r6, r2
 80059e2:	d505      	bpl.n	80059f0 <__swrite+0x1e>
 80059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e8:	2302      	movs	r3, #2
 80059ea:	2200      	movs	r2, #0
 80059ec:	f000 f9c8 	bl	8005d80 <_lseek_r>
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fa:	81a3      	strh	r3, [r4, #12]
 80059fc:	4632      	mov	r2, r6
 80059fe:	463b      	mov	r3, r7
 8005a00:	4628      	mov	r0, r5
 8005a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a06:	f000 b869 	b.w	8005adc <_write_r>

08005a0a <__sseek>:
 8005a0a:	b510      	push	{r4, lr}
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a12:	f000 f9b5 	bl	8005d80 <_lseek_r>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	bf15      	itete	ne
 8005a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a26:	81a3      	strheq	r3, [r4, #12]
 8005a28:	bf18      	it	ne
 8005a2a:	81a3      	strhne	r3, [r4, #12]
 8005a2c:	bd10      	pop	{r4, pc}

08005a2e <__sclose>:
 8005a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a32:	f000 b8d3 	b.w	8005bdc <_close_r>
	...

08005a38 <__swbuf_r>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	4605      	mov	r5, r0
 8005a40:	b118      	cbz	r0, 8005a4a <__swbuf_r+0x12>
 8005a42:	6983      	ldr	r3, [r0, #24]
 8005a44:	b90b      	cbnz	r3, 8005a4a <__swbuf_r+0x12>
 8005a46:	f7ff fb81 	bl	800514c <__sinit>
 8005a4a:	4b21      	ldr	r3, [pc, #132]	; (8005ad0 <__swbuf_r+0x98>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	d12b      	bne.n	8005aa8 <__swbuf_r+0x70>
 8005a50:	686c      	ldr	r4, [r5, #4]
 8005a52:	69a3      	ldr	r3, [r4, #24]
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	071a      	lsls	r2, r3, #28
 8005a5a:	d52f      	bpl.n	8005abc <__swbuf_r+0x84>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	b36b      	cbz	r3, 8005abc <__swbuf_r+0x84>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1ac0      	subs	r0, r0, r3
 8005a66:	6963      	ldr	r3, [r4, #20]
 8005a68:	b2f6      	uxtb	r6, r6
 8005a6a:	4283      	cmp	r3, r0
 8005a6c:	4637      	mov	r7, r6
 8005a6e:	dc04      	bgt.n	8005a7a <__swbuf_r+0x42>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f948 	bl	8005d08 <_fflush_r>
 8005a78:	bb30      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	6022      	str	r2, [r4, #0]
 8005a86:	701e      	strb	r6, [r3, #0]
 8005a88:	6963      	ldr	r3, [r4, #20]
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	4283      	cmp	r3, r0
 8005a8e:	d004      	beq.n	8005a9a <__swbuf_r+0x62>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	07db      	lsls	r3, r3, #31
 8005a94:	d506      	bpl.n	8005aa4 <__swbuf_r+0x6c>
 8005a96:	2e0a      	cmp	r6, #10
 8005a98:	d104      	bne.n	8005aa4 <__swbuf_r+0x6c>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 f933 	bl	8005d08 <_fflush_r>
 8005aa2:	b988      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <__swbuf_r+0x9c>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <__swbuf_r+0x7a>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7cf      	b.n	8005a52 <__swbuf_r+0x1a>
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <__swbuf_r+0xa0>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7ca      	b.n	8005a52 <__swbuf_r+0x1a>
 8005abc:	4621      	mov	r1, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 f81e 	bl	8005b00 <__swsetup_r>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d0cb      	beq.n	8005a60 <__swbuf_r+0x28>
 8005ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8005acc:	e7ea      	b.n	8005aa4 <__swbuf_r+0x6c>
 8005ace:	bf00      	nop
 8005ad0:	080060a8 	.word	0x080060a8
 8005ad4:	080060c8 	.word	0x080060c8
 8005ad8:	08006088 	.word	0x08006088

08005adc <_write_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	; (8005afc <_write_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fb fc93 	bl	8001416 <_write>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_write_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_write_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20001790 	.word	0x20001790

08005b00 <__swsetup_r>:
 8005b00:	4b32      	ldr	r3, [pc, #200]	; (8005bcc <__swsetup_r+0xcc>)
 8005b02:	b570      	push	{r4, r5, r6, lr}
 8005b04:	681d      	ldr	r5, [r3, #0]
 8005b06:	4606      	mov	r6, r0
 8005b08:	460c      	mov	r4, r1
 8005b0a:	b125      	cbz	r5, 8005b16 <__swsetup_r+0x16>
 8005b0c:	69ab      	ldr	r3, [r5, #24]
 8005b0e:	b913      	cbnz	r3, 8005b16 <__swsetup_r+0x16>
 8005b10:	4628      	mov	r0, r5
 8005b12:	f7ff fb1b 	bl	800514c <__sinit>
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <__swsetup_r+0xd0>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	d10f      	bne.n	8005b3c <__swsetup_r+0x3c>
 8005b1c:	686c      	ldr	r4, [r5, #4]
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b24:	0719      	lsls	r1, r3, #28
 8005b26:	d42c      	bmi.n	8005b82 <__swsetup_r+0x82>
 8005b28:	06dd      	lsls	r5, r3, #27
 8005b2a:	d411      	bmi.n	8005b50 <__swsetup_r+0x50>
 8005b2c:	2309      	movs	r3, #9
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b34:	81a3      	strh	r3, [r4, #12]
 8005b36:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3a:	e03e      	b.n	8005bba <__swsetup_r+0xba>
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <__swsetup_r+0xd4>)
 8005b3e:	429c      	cmp	r4, r3
 8005b40:	d101      	bne.n	8005b46 <__swsetup_r+0x46>
 8005b42:	68ac      	ldr	r4, [r5, #8]
 8005b44:	e7eb      	b.n	8005b1e <__swsetup_r+0x1e>
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <__swsetup_r+0xd8>)
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	bf08      	it	eq
 8005b4c:	68ec      	ldreq	r4, [r5, #12]
 8005b4e:	e7e6      	b.n	8005b1e <__swsetup_r+0x1e>
 8005b50:	0758      	lsls	r0, r3, #29
 8005b52:	d512      	bpl.n	8005b7a <__swsetup_r+0x7a>
 8005b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b56:	b141      	cbz	r1, 8005b6a <__swsetup_r+0x6a>
 8005b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b5c:	4299      	cmp	r1, r3
 8005b5e:	d002      	beq.n	8005b66 <__swsetup_r+0x66>
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f991 	bl	8005e88 <_free_r>
 8005b66:	2300      	movs	r3, #0
 8005b68:	6363      	str	r3, [r4, #52]	; 0x34
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	2300      	movs	r3, #0
 8005b74:	6063      	str	r3, [r4, #4]
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	f043 0308 	orr.w	r3, r3, #8
 8005b80:	81a3      	strh	r3, [r4, #12]
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	b94b      	cbnz	r3, 8005b9a <__swsetup_r+0x9a>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b90:	d003      	beq.n	8005b9a <__swsetup_r+0x9a>
 8005b92:	4621      	mov	r1, r4
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f92b 	bl	8005df0 <__smakebuf_r>
 8005b9a:	89a0      	ldrh	r0, [r4, #12]
 8005b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ba0:	f010 0301 	ands.w	r3, r0, #1
 8005ba4:	d00a      	beq.n	8005bbc <__swsetup_r+0xbc>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	6963      	ldr	r3, [r4, #20]
 8005bac:	425b      	negs	r3, r3
 8005bae:	61a3      	str	r3, [r4, #24]
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	b943      	cbnz	r3, 8005bc6 <__swsetup_r+0xc6>
 8005bb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bb8:	d1ba      	bne.n	8005b30 <__swsetup_r+0x30>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	0781      	lsls	r1, r0, #30
 8005bbe:	bf58      	it	pl
 8005bc0:	6963      	ldrpl	r3, [r4, #20]
 8005bc2:	60a3      	str	r3, [r4, #8]
 8005bc4:	e7f4      	b.n	8005bb0 <__swsetup_r+0xb0>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e7f7      	b.n	8005bba <__swsetup_r+0xba>
 8005bca:	bf00      	nop
 8005bcc:	200002ec 	.word	0x200002ec
 8005bd0:	080060a8 	.word	0x080060a8
 8005bd4:	080060c8 	.word	0x080060c8
 8005bd8:	08006088 	.word	0x08006088

08005bdc <_close_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d06      	ldr	r5, [pc, #24]	; (8005bf8 <_close_r+0x1c>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	f7fb fc31 	bl	800144e <_close>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_close_r+0x1a>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_close_r+0x1a>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	20001790 	.word	0x20001790

08005bfc <__sflush_r>:
 8005bfc:	898a      	ldrh	r2, [r1, #12]
 8005bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c02:	4605      	mov	r5, r0
 8005c04:	0710      	lsls	r0, r2, #28
 8005c06:	460c      	mov	r4, r1
 8005c08:	d458      	bmi.n	8005cbc <__sflush_r+0xc0>
 8005c0a:	684b      	ldr	r3, [r1, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dc05      	bgt.n	8005c1c <__sflush_r+0x20>
 8005c10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dc02      	bgt.n	8005c1c <__sflush_r+0x20>
 8005c16:	2000      	movs	r0, #0
 8005c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	d0f9      	beq.n	8005c16 <__sflush_r+0x1a>
 8005c22:	2300      	movs	r3, #0
 8005c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c28:	682f      	ldr	r7, [r5, #0]
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	d032      	beq.n	8005c94 <__sflush_r+0x98>
 8005c2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	075a      	lsls	r2, r3, #29
 8005c34:	d505      	bpl.n	8005c42 <__sflush_r+0x46>
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	1ac0      	subs	r0, r0, r3
 8005c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c3c:	b10b      	cbz	r3, 8005c42 <__sflush_r+0x46>
 8005c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c40:	1ac0      	subs	r0, r0, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	4602      	mov	r2, r0
 8005c46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b0      	blx	r6
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	d106      	bne.n	8005c62 <__sflush_r+0x66>
 8005c54:	6829      	ldr	r1, [r5, #0]
 8005c56:	291d      	cmp	r1, #29
 8005c58:	d82c      	bhi.n	8005cb4 <__sflush_r+0xb8>
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <__sflush_r+0x108>)
 8005c5c:	40ca      	lsrs	r2, r1
 8005c5e:	07d6      	lsls	r6, r2, #31
 8005c60:	d528      	bpl.n	8005cb4 <__sflush_r+0xb8>
 8005c62:	2200      	movs	r2, #0
 8005c64:	6062      	str	r2, [r4, #4]
 8005c66:	04d9      	lsls	r1, r3, #19
 8005c68:	6922      	ldr	r2, [r4, #16]
 8005c6a:	6022      	str	r2, [r4, #0]
 8005c6c:	d504      	bpl.n	8005c78 <__sflush_r+0x7c>
 8005c6e:	1c42      	adds	r2, r0, #1
 8005c70:	d101      	bne.n	8005c76 <__sflush_r+0x7a>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	b903      	cbnz	r3, 8005c78 <__sflush_r+0x7c>
 8005c76:	6560      	str	r0, [r4, #84]	; 0x54
 8005c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c7a:	602f      	str	r7, [r5, #0]
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d0ca      	beq.n	8005c16 <__sflush_r+0x1a>
 8005c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c84:	4299      	cmp	r1, r3
 8005c86:	d002      	beq.n	8005c8e <__sflush_r+0x92>
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f8fd 	bl	8005e88 <_free_r>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	6360      	str	r0, [r4, #52]	; 0x34
 8005c92:	e7c1      	b.n	8005c18 <__sflush_r+0x1c>
 8005c94:	6a21      	ldr	r1, [r4, #32]
 8005c96:	2301      	movs	r3, #1
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b0      	blx	r6
 8005c9c:	1c41      	adds	r1, r0, #1
 8005c9e:	d1c7      	bne.n	8005c30 <__sflush_r+0x34>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0c4      	beq.n	8005c30 <__sflush_r+0x34>
 8005ca6:	2b1d      	cmp	r3, #29
 8005ca8:	d001      	beq.n	8005cae <__sflush_r+0xb2>
 8005caa:	2b16      	cmp	r3, #22
 8005cac:	d101      	bne.n	8005cb2 <__sflush_r+0xb6>
 8005cae:	602f      	str	r7, [r5, #0]
 8005cb0:	e7b1      	b.n	8005c16 <__sflush_r+0x1a>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	e7ad      	b.n	8005c18 <__sflush_r+0x1c>
 8005cbc:	690f      	ldr	r7, [r1, #16]
 8005cbe:	2f00      	cmp	r7, #0
 8005cc0:	d0a9      	beq.n	8005c16 <__sflush_r+0x1a>
 8005cc2:	0793      	lsls	r3, r2, #30
 8005cc4:	680e      	ldr	r6, [r1, #0]
 8005cc6:	bf08      	it	eq
 8005cc8:	694b      	ldreq	r3, [r1, #20]
 8005cca:	600f      	str	r7, [r1, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2300      	movne	r3, #0
 8005cd0:	eba6 0807 	sub.w	r8, r6, r7
 8005cd4:	608b      	str	r3, [r1, #8]
 8005cd6:	f1b8 0f00 	cmp.w	r8, #0
 8005cda:	dd9c      	ble.n	8005c16 <__sflush_r+0x1a>
 8005cdc:	6a21      	ldr	r1, [r4, #32]
 8005cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ce0:	4643      	mov	r3, r8
 8005ce2:	463a      	mov	r2, r7
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b0      	blx	r6
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	dc06      	bgt.n	8005cfa <__sflush_r+0xfe>
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf2:	81a3      	strh	r3, [r4, #12]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	e78e      	b.n	8005c18 <__sflush_r+0x1c>
 8005cfa:	4407      	add	r7, r0
 8005cfc:	eba8 0800 	sub.w	r8, r8, r0
 8005d00:	e7e9      	b.n	8005cd6 <__sflush_r+0xda>
 8005d02:	bf00      	nop
 8005d04:	20400001 	.word	0x20400001

08005d08 <_fflush_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	690b      	ldr	r3, [r1, #16]
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	460c      	mov	r4, r1
 8005d10:	b913      	cbnz	r3, 8005d18 <_fflush_r+0x10>
 8005d12:	2500      	movs	r5, #0
 8005d14:	4628      	mov	r0, r5
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	b118      	cbz	r0, 8005d22 <_fflush_r+0x1a>
 8005d1a:	6983      	ldr	r3, [r0, #24]
 8005d1c:	b90b      	cbnz	r3, 8005d22 <_fflush_r+0x1a>
 8005d1e:	f7ff fa15 	bl	800514c <__sinit>
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <_fflush_r+0x6c>)
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d11b      	bne.n	8005d60 <_fflush_r+0x58>
 8005d28:	686c      	ldr	r4, [r5, #4]
 8005d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0ef      	beq.n	8005d12 <_fflush_r+0xa>
 8005d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d34:	07d0      	lsls	r0, r2, #31
 8005d36:	d404      	bmi.n	8005d42 <_fflush_r+0x3a>
 8005d38:	0599      	lsls	r1, r3, #22
 8005d3a:	d402      	bmi.n	8005d42 <_fflush_r+0x3a>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d3e:	f7ff faa3 	bl	8005288 <__retarget_lock_acquire_recursive>
 8005d42:	4628      	mov	r0, r5
 8005d44:	4621      	mov	r1, r4
 8005d46:	f7ff ff59 	bl	8005bfc <__sflush_r>
 8005d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d4c:	07da      	lsls	r2, r3, #31
 8005d4e:	4605      	mov	r5, r0
 8005d50:	d4e0      	bmi.n	8005d14 <_fflush_r+0xc>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	059b      	lsls	r3, r3, #22
 8005d56:	d4dd      	bmi.n	8005d14 <_fflush_r+0xc>
 8005d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5a:	f7ff fa96 	bl	800528a <__retarget_lock_release_recursive>
 8005d5e:	e7d9      	b.n	8005d14 <_fflush_r+0xc>
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <_fflush_r+0x70>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	d101      	bne.n	8005d6a <_fflush_r+0x62>
 8005d66:	68ac      	ldr	r4, [r5, #8]
 8005d68:	e7df      	b.n	8005d2a <_fflush_r+0x22>
 8005d6a:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <_fflush_r+0x74>)
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	bf08      	it	eq
 8005d70:	68ec      	ldreq	r4, [r5, #12]
 8005d72:	e7da      	b.n	8005d2a <_fflush_r+0x22>
 8005d74:	080060a8 	.word	0x080060a8
 8005d78:	080060c8 	.word	0x080060c8
 8005d7c:	08006088 	.word	0x08006088

08005d80 <_lseek_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4d07      	ldr	r5, [pc, #28]	; (8005da0 <_lseek_r+0x20>)
 8005d84:	4604      	mov	r4, r0
 8005d86:	4608      	mov	r0, r1
 8005d88:	4611      	mov	r1, r2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	602a      	str	r2, [r5, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f7fb fb84 	bl	800149c <_lseek>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_lseek_r+0x1e>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_lseek_r+0x1e>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20001790 	.word	0x20001790

08005da4 <__swhatbuf_r>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	460e      	mov	r6, r1
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	2900      	cmp	r1, #0
 8005dae:	b096      	sub	sp, #88	; 0x58
 8005db0:	4614      	mov	r4, r2
 8005db2:	461d      	mov	r5, r3
 8005db4:	da08      	bge.n	8005dc8 <__swhatbuf_r+0x24>
 8005db6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	061a      	lsls	r2, r3, #24
 8005dc0:	d410      	bmi.n	8005de4 <__swhatbuf_r+0x40>
 8005dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc6:	e00e      	b.n	8005de6 <__swhatbuf_r+0x42>
 8005dc8:	466a      	mov	r2, sp
 8005dca:	f000 f8bb 	bl	8005f44 <_fstat_r>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	dbf1      	blt.n	8005db6 <__swhatbuf_r+0x12>
 8005dd2:	9a01      	ldr	r2, [sp, #4]
 8005dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ddc:	425a      	negs	r2, r3
 8005dde:	415a      	adcs	r2, r3
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	e7ee      	b.n	8005dc2 <__swhatbuf_r+0x1e>
 8005de4:	2340      	movs	r3, #64	; 0x40
 8005de6:	2000      	movs	r0, #0
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	b016      	add	sp, #88	; 0x58
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08005df0 <__smakebuf_r>:
 8005df0:	898b      	ldrh	r3, [r1, #12]
 8005df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005df4:	079d      	lsls	r5, r3, #30
 8005df6:	4606      	mov	r6, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	d507      	bpl.n	8005e0c <__smakebuf_r+0x1c>
 8005dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	2301      	movs	r3, #1
 8005e06:	6163      	str	r3, [r4, #20]
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	ab01      	add	r3, sp, #4
 8005e0e:	466a      	mov	r2, sp
 8005e10:	f7ff ffc8 	bl	8005da4 <__swhatbuf_r>
 8005e14:	9900      	ldr	r1, [sp, #0]
 8005e16:	4605      	mov	r5, r0
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff fa57 	bl	80052cc <_malloc_r>
 8005e1e:	b948      	cbnz	r0, 8005e34 <__smakebuf_r+0x44>
 8005e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e24:	059a      	lsls	r2, r3, #22
 8005e26:	d4ef      	bmi.n	8005e08 <__smakebuf_r+0x18>
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	e7e3      	b.n	8005dfc <__smakebuf_r+0xc>
 8005e34:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <__smakebuf_r+0x7c>)
 8005e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	6020      	str	r0, [r4, #0]
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	9b00      	ldr	r3, [sp, #0]
 8005e44:	6163      	str	r3, [r4, #20]
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	6120      	str	r0, [r4, #16]
 8005e4a:	b15b      	cbz	r3, 8005e64 <__smakebuf_r+0x74>
 8005e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e50:	4630      	mov	r0, r6
 8005e52:	f000 f889 	bl	8005f68 <_isatty_r>
 8005e56:	b128      	cbz	r0, 8005e64 <__smakebuf_r+0x74>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	89a0      	ldrh	r0, [r4, #12]
 8005e66:	4305      	orrs	r5, r0
 8005e68:	81a5      	strh	r5, [r4, #12]
 8005e6a:	e7cd      	b.n	8005e08 <__smakebuf_r+0x18>
 8005e6c:	080050e5 	.word	0x080050e5

08005e70 <__malloc_lock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__malloc_lock+0x8>)
 8005e72:	f7ff ba09 	b.w	8005288 <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	20001784 	.word	0x20001784

08005e7c <__malloc_unlock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__malloc_unlock+0x8>)
 8005e7e:	f7ff ba04 	b.w	800528a <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	20001784 	.word	0x20001784

08005e88 <_free_r>:
 8005e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e8a:	2900      	cmp	r1, #0
 8005e8c:	d044      	beq.n	8005f18 <_free_r+0x90>
 8005e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e92:	9001      	str	r0, [sp, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f1a1 0404 	sub.w	r4, r1, #4
 8005e9a:	bfb8      	it	lt
 8005e9c:	18e4      	addlt	r4, r4, r3
 8005e9e:	f7ff ffe7 	bl	8005e70 <__malloc_lock>
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <_free_r+0x94>)
 8005ea4:	9801      	ldr	r0, [sp, #4]
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	b933      	cbnz	r3, 8005eb8 <_free_r+0x30>
 8005eaa:	6063      	str	r3, [r4, #4]
 8005eac:	6014      	str	r4, [r2, #0]
 8005eae:	b003      	add	sp, #12
 8005eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eb4:	f7ff bfe2 	b.w	8005e7c <__malloc_unlock>
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	d908      	bls.n	8005ece <_free_r+0x46>
 8005ebc:	6825      	ldr	r5, [r4, #0]
 8005ebe:	1961      	adds	r1, r4, r5
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	bf01      	itttt	eq
 8005ec4:	6819      	ldreq	r1, [r3, #0]
 8005ec6:	685b      	ldreq	r3, [r3, #4]
 8005ec8:	1949      	addeq	r1, r1, r5
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	e7ed      	b.n	8005eaa <_free_r+0x22>
 8005ece:	461a      	mov	r2, r3
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	b10b      	cbz	r3, 8005ed8 <_free_r+0x50>
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d9fa      	bls.n	8005ece <_free_r+0x46>
 8005ed8:	6811      	ldr	r1, [r2, #0]
 8005eda:	1855      	adds	r5, r2, r1
 8005edc:	42a5      	cmp	r5, r4
 8005ede:	d10b      	bne.n	8005ef8 <_free_r+0x70>
 8005ee0:	6824      	ldr	r4, [r4, #0]
 8005ee2:	4421      	add	r1, r4
 8005ee4:	1854      	adds	r4, r2, r1
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	6011      	str	r1, [r2, #0]
 8005eea:	d1e0      	bne.n	8005eae <_free_r+0x26>
 8005eec:	681c      	ldr	r4, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	6053      	str	r3, [r2, #4]
 8005ef2:	4421      	add	r1, r4
 8005ef4:	6011      	str	r1, [r2, #0]
 8005ef6:	e7da      	b.n	8005eae <_free_r+0x26>
 8005ef8:	d902      	bls.n	8005f00 <_free_r+0x78>
 8005efa:	230c      	movs	r3, #12
 8005efc:	6003      	str	r3, [r0, #0]
 8005efe:	e7d6      	b.n	8005eae <_free_r+0x26>
 8005f00:	6825      	ldr	r5, [r4, #0]
 8005f02:	1961      	adds	r1, r4, r5
 8005f04:	428b      	cmp	r3, r1
 8005f06:	bf04      	itt	eq
 8005f08:	6819      	ldreq	r1, [r3, #0]
 8005f0a:	685b      	ldreq	r3, [r3, #4]
 8005f0c:	6063      	str	r3, [r4, #4]
 8005f0e:	bf04      	itt	eq
 8005f10:	1949      	addeq	r1, r1, r5
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	6054      	str	r4, [r2, #4]
 8005f16:	e7ca      	b.n	8005eae <_free_r+0x26>
 8005f18:	b003      	add	sp, #12
 8005f1a:	bd30      	pop	{r4, r5, pc}
 8005f1c:	20001788 	.word	0x20001788

08005f20 <_read_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4d07      	ldr	r5, [pc, #28]	; (8005f40 <_read_r+0x20>)
 8005f24:	4604      	mov	r4, r0
 8005f26:	4608      	mov	r0, r1
 8005f28:	4611      	mov	r1, r2
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f7fb fa54 	bl	80013dc <_read>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_read_r+0x1e>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_read_r+0x1e>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	20001790 	.word	0x20001790

08005f44 <_fstat_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d07      	ldr	r5, [pc, #28]	; (8005f64 <_fstat_r+0x20>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	f7fb fa88 	bl	8001466 <_fstat>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d102      	bne.n	8005f60 <_fstat_r+0x1c>
 8005f5a:	682b      	ldr	r3, [r5, #0]
 8005f5c:	b103      	cbz	r3, 8005f60 <_fstat_r+0x1c>
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	20001790 	.word	0x20001790

08005f68 <_isatty_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4d06      	ldr	r5, [pc, #24]	; (8005f84 <_isatty_r+0x1c>)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fb fa87 	bl	8001486 <_isatty>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_isatty_r+0x1a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_isatty_r+0x1a>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	20001790 	.word	0x20001790

08005f88 <_init>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr

08005f94 <_fini>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr
